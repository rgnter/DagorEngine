.. autogenerated

********
eventbus
********

module 'eventbus'



*Source file: prog/gameLibs/quirrel/sqEventBus/sqEventBus.cpp*

Usage::

  let { subscribe, eventbus_subscribe, subscribe_onehit, eventbus_subscribe_onehit, unsubscribe, eventbus_unsubscribe, send, eventbus_send, send_foreign, eventbus_send_foreign, eventbus_has_listeners, has_listeners, has_foreign_listeners, eventbus_has_foreign_listeners } = require("eventbus")

or::

  from "eventbus" import *

.. code-block:: sq

  //'eventbus' exports:
  {
    function subscribe(arg0, arg1, ...): string, closure_and_nativeclosure, any_type -> _undocumented_
    function eventbus_subscribe(arg0, arg1, ...): string, closure_and_nativeclosure, any_type -> _undocumented_
    function subscribe_onehit(arg0, arg1, ...): string, closure_and_nativeclosure, any_type -> _undocumented_
    function eventbus_subscribe_onehit(arg0, arg1, ...): string, closure_and_nativeclosure, any_type -> _undocumented_
    function unsubscribe(arg0, arg1): string, closure_and_nativeclosure -> _undocumented_
    function eventbus_unsubscribe(arg0, arg1): string, closure_and_nativeclosure -> _undocumented_
    function send(arg0, arg1): string, any_type -> _undocumented_
    function eventbus_send(arg0, arg1): string, any_type -> _undocumented_
    function send_foreign(arg0, arg1): string, any_type -> _undocumented_
    function eventbus_send_foreign(arg0, arg1): string, any_type -> _undocumented_
    function eventbus_has_listeners(arg0): string -> _undocumented_
    function has_listeners(arg0): string -> _undocumented_
    function has_foreign_listeners(arg0): string -> _undocumented_
    function eventbus_has_foreign_listeners(arg0): string -> _undocumented_
  }
  

.. sq:function:: function subscribe(arg0, arg1, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: closure_and_nativeclosure

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-3``

  ``typecheck mask: any_type, string, closure_and_nativeclosure``

.. sq:function:: function eventbus_subscribe(arg0, arg1, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: closure_and_nativeclosure

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-3``

  ``typecheck mask: any_type, string, closure_and_nativeclosure``

.. sq:function:: function subscribe_onehit(arg0, arg1, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: closure_and_nativeclosure

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-3``

  ``typecheck mask: any_type, string, closure_and_nativeclosure``

.. sq:function:: function eventbus_subscribe_onehit(arg0, arg1, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: closure_and_nativeclosure

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-3``

  ``typecheck mask: any_type, string, closure_and_nativeclosure``

.. sq:function:: function unsubscribe(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: closure_and_nativeclosure

  ``nparamscheck:3``

  ``typecheck mask: any_type, string, closure_and_nativeclosure``

.. sq:function:: function eventbus_unsubscribe(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: closure_and_nativeclosure

  ``nparamscheck:3``

  ``typecheck mask: any_type, string, closure_and_nativeclosure``

.. sq:function:: function send(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: any_type

  ``nparamscheck:3``

  ``typecheck mask: any_type, string, any_type``

.. sq:function:: function eventbus_send(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: any_type

  ``nparamscheck:3``

  ``typecheck mask: any_type, string, any_type``

.. sq:function:: function send_foreign(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: any_type

  ``nparamscheck:3``

  ``typecheck mask: any_type, string, any_type``

.. sq:function:: function eventbus_send_foreign(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: any_type

  ``nparamscheck:3``

  ``typecheck mask: any_type, string, any_type``

.. sq:function:: function eventbus_has_listeners(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  ``nparamscheck:2``

  ``typecheck mask: any_type, string``

.. sq:function:: function has_listeners(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  ``nparamscheck:2``

  ``typecheck mask: any_type, string``

.. sq:function:: function has_foreign_listeners(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  ``nparamscheck:2``

  ``typecheck mask: any_type, string``

.. sq:function:: function eventbus_has_foreign_listeners(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  ``nparamscheck:2``

  ``typecheck mask: any_type, string``


