.. autogenerated

****
daRg
****

module 'daRg'



*Source file: prog/gameLibs/daRg/lottiePicture.cpp*

Usage::

  let { KBD_BIT_CAPS_LOCK, KBD_BIT_NUM_LOCK, KBD_BIT_SCROLL_LOCK, PANEL_ANCHOR_NONE, PANEL_ANCHOR_SCENE, PANEL_ANCHOR_VRSPACE, PANEL_ANCHOR_HEAD, PANEL_ANCHOR_LEFTHAND, PANEL_ANCHOR_RIGHTHAND, PANEL_ANCHOR_ENTITY, PANEL_GEOMETRY_NONE, PANEL_GEOMETRY_RECTANGLE, PANEL_RC_NONE, PANEL_RC_FACE_LEFT_HAND, PANEL_RC_FACE_RIGHT_HAND, PANEL_RC_FACE_HEAD, PANEL_RC_FACE_HEAD_LOCK_Y, PANEL_RC_FACE_ENTITY, PANEL_RENDER_CAST_SHADOW, PANEL_RENDER_OPAQUE, PANEL_RENDER_ALWAYS_ON_TOP, GuiScene, SceneConfig, anim_start, anim_request_stop, anim_skip, anim_skip_delay, set_kb_focus, capture_kb_focus, calc_comp_size, move_mouse_cursor, get_mouse_cursor_pos, resolve_button_id, gui_scene, FLOW_PARENT_RELATIVE, ALIGN_LEFT, ALIGN_TOP, ALIGN_RIGHT, ALIGN_BOTTOM, ALIGN_CENTER, VECTOR_WIDTH, VECTOR_CENTER_LINE, VECTOR_LINE_INDENT_PX, VECTOR_POLY, VECTOR_QUADS, FFT_NONE, O_HORIZONTAL, TOVERFLOW_CLIP, DIR_UP, EVENT_BREAK, EVENT_CONTINUE, Linear, InQuad, OutQuad, InOutQuad, InCubic, OutCubic, InOutCubic, InQuintic, OutQuintic, InOutQuintic, InQuart, OutQuart, InOutQuart, InSine, OutSine, InOutSine, InCirc, OutCirc, InOutCirc, InExp, OutExp, InOutExp, InElastic, OutElastic, InOutElastic, InBack, OutBack, InOutBack, InBounce, OutBounce, InOutBounce, InOutBezier, CosineFull, InStep, OutStep, Blink, DoubleBlink, BlinkSin, BlinkCos, Discrete8, Shake4, Shake6, S_KB_FOCUS, S_HOVER, S_TOP_HOVER, S_ACTIVE, S_MOUSE_ACTIVE, S_KBD_ACTIVE, S_HOTKEY_ACTIVE, S_TOUCH_ACTIVE, S_JOYSTICK_ACTIVE, S_VR_ACTIVE, S_DRAG, MR_NONE, MR_T, MR_R, MR_B, MR_L, MR_LT, MR_RT, MR_LB, MR_RB, MR_AREA, FMT_NO_WRAP, FMT_KEEP_SPACES, FMT_IGNORE_TAGS, FMT_HIDE_ELLIPSIS, FMT_AS_IS, DEVID_KEYBOARD, KEEP_ASPECT_NONE, KEEP_ASPECT_FIT, KEEP_ASPECT_FILL, AXIS_L_THUMB_H, AXIS_L_THUMB_V, AXIS_R_THUMB_H, AXIS_R_THUMB_V, AXIS_L_TRIGGER, AXIS_R_TRIGGER, AXIS_LR_TRIGGER, XMB_STOP, R_PROCESSED, SIZE_TO_CONTENT, Fonts, AnimProp, color, bgColor, fgColor, fillColor, borderColor, opacity, rotate, scale, translate, fValue, picSaturate, brightness, Behaviors, ScrollHandler, JoystickAxisObservable, ElemGroup, Behavior, Picture, Immediate, FormattedText, IGenVideoPlayer, IGenSound, DragAndDropState, EventDataRect, MouseClickEventData, HotkeyEventData, HoverEventData, MoveToAreaTarget, Color, sw, sh, flex, fontH, pw, ph, elemw, elemh, locate_element_source, get_element_info, get_font_metrics, setFontDefHt, getFontDefHt, getFontInitialHt, calc_str_box, ElementRef, LottieAnimation } = require("daRg")

or::

  from "daRg" import *

.. code-block:: sq

  //'daRg' exports:
  {
    const KBD_BIT_CAPS_LOCK
    const KBD_BIT_NUM_LOCK
    const KBD_BIT_SCROLL_LOCK
    const PANEL_ANCHOR_NONE
    const PANEL_ANCHOR_SCENE
    const PANEL_ANCHOR_VRSPACE
    const PANEL_ANCHOR_HEAD
    const PANEL_ANCHOR_LEFTHAND
    const PANEL_ANCHOR_RIGHTHAND
    const PANEL_ANCHOR_ENTITY
    const PANEL_GEOMETRY_NONE
    const PANEL_GEOMETRY_RECTANGLE
    const PANEL_RC_NONE
    const PANEL_RC_FACE_LEFT_HAND
    const PANEL_RC_FACE_RIGHT_HAND
    const PANEL_RC_FACE_HEAD
    const PANEL_RC_FACE_HEAD_LOCK_Y
    const PANEL_RC_FACE_ENTITY
    const PANEL_RENDER_CAST_SHADOW
    const PANEL_RENDER_OPAQUE
    const PANEL_RENDER_ALWAYS_ON_TOP
    class GuiScene
    class SceneConfig
    function anim_start()
    function anim_request_stop()
    function anim_skip()
    function anim_skip_delay()
    function set_kb_focus()
    function capture_kb_focus()
    function calc_comp_size(arg0): null or table or closure_and_nativeclosure or class_instance or class -> _undocumented_
    function move_mouse_cursor(arg0, arg1, ...): any_type, bool, any_type -> _undocumented_
    function get_mouse_cursor_pos(arg0, ...): class_instance, any_type -> _undocumented_
    function resolve_button_id(arg0): string -> _undocumented_
    value gui_scene
    const FLOW_PARENT_RELATIVE
    const ALIGN_LEFT
    const ALIGN_TOP
    const ALIGN_RIGHT
    const ALIGN_BOTTOM
    const ALIGN_CENTER
    const VECTOR_WIDTH
    const VECTOR_CENTER_LINE
    const VECTOR_LINE_INDENT_PX
    const VECTOR_POLY
    const VECTOR_QUADS
    const FFT_NONE
    const O_HORIZONTAL
    const TOVERFLOW_CLIP
    const DIR_UP
    const EVENT_BREAK
    const EVENT_CONTINUE
    const Linear
    const InQuad
    const OutQuad
    const InOutQuad
    const InCubic
    const OutCubic
    const InOutCubic
    const InQuintic
    const OutQuintic
    const InOutQuintic
    const InQuart
    const OutQuart
    const InOutQuart
    const InSine
    const OutSine
    const InOutSine
    const InCirc
    const OutCirc
    const InOutCirc
    const InExp
    const OutExp
    const InOutExp
    const InElastic
    const OutElastic
    const InOutElastic
    const InBack
    const OutBack
    const InOutBack
    const InBounce
    const OutBounce
    const InOutBounce
    const InOutBezier
    const CosineFull
    const InStep
    const OutStep
    const Blink
    const DoubleBlink
    const BlinkSin
    const BlinkCos
    const Discrete8
    const Shake4
    const Shake6
    const S_KB_FOCUS
    const S_HOVER
    const S_TOP_HOVER
    const S_ACTIVE
    const S_MOUSE_ACTIVE
    const S_KBD_ACTIVE
    const S_HOTKEY_ACTIVE
    const S_TOUCH_ACTIVE
    const S_JOYSTICK_ACTIVE
    const S_VR_ACTIVE
    const S_DRAG
    const MR_NONE
    const MR_T
    const MR_R
    const MR_B
    const MR_L
    const MR_LT
    const MR_RT
    const MR_LB
    const MR_RB
    const MR_AREA
    const FMT_NO_WRAP
    const FMT_KEEP_SPACES
    const FMT_IGNORE_TAGS
    const FMT_HIDE_ELLIPSIS
    const FMT_AS_IS
    const DEVID_KEYBOARD
    const KEEP_ASPECT_NONE
    const KEEP_ASPECT_FIT
    const KEEP_ASPECT_FILL
    const AXIS_L_THUMB_H
    const AXIS_L_THUMB_V
    const AXIS_R_THUMB_H
    const AXIS_R_THUMB_V
    const AXIS_L_TRIGGER
    const AXIS_R_TRIGGER
    const AXIS_LR_TRIGGER
    const XMB_STOP
    const R_PROCESSED
    const SIZE_TO_CONTENT
    value Fonts
    enum AnimProp
    value color
    value bgColor
    value fgColor
    value fillColor
    value borderColor
    value opacity
    value rotate
    value scale
    value translate
    value fValue
    value picSaturate
    value brightness
    table Behaviors
    class ScrollHandler
    class JoystickAxisObservable
    class ElemGroup
    class Behavior
    class Picture
    class Immediate
    class FormattedText
    class IGenVideoPlayer
    class IGenSound
    class DragAndDropState
    class EventDataRect
    class MouseClickEventData
    class HotkeyEventData
    class HoverEventData
    class MoveToAreaTarget
    function Color(arg0, arg1, arg2, arg3, ...): integer_or_float, integer_or_float, integer_or_float, integer_or_float, any_type -> _undocumented_
    function sw(percent): float -> float
    function sh(percent): float -> float
    function flex(arg0, ...): integer_or_float, any_type -> _undocumented_
    function fontH(arg0): integer_or_float -> _undocumented_
    function pw(arg0): integer_or_float -> _undocumented_
    function ph(arg0): integer_or_float -> _undocumented_
    function elemw(arg0): integer_or_float -> _undocumented_
    function elemh(arg0): integer_or_float -> _undocumented_
    function locate_element_source(arg0): class_instance -> _undocumented_
    function get_element_info(arg0): class_instance -> _undocumented_
    function get_font_metrics(fontId, fontHt): integer, float -> table
    function setFontDefHt(font_name, pix_ht): string, integer -> bool
    function getFontDefHt(font_name): string -> integer
    function getFontInitialHt(font_name): string -> integer
    function calc_str_box(element_or_text, element_or_style): string|closure_and_nativeclosure|table, table|closure_and_nativeclosure|null -> array
    class ElementRef
    class LottieAnimation
  }
  

.. sq:attribute:: const KBD_BIT_CAPS_LOCK = 1

.. sq:attribute:: const KBD_BIT_NUM_LOCK = 2

.. sq:attribute:: const KBD_BIT_SCROLL_LOCK = 4

.. sq:attribute:: const PANEL_ANCHOR_NONE = int(PanelAnchor::None)

.. sq:attribute:: const PANEL_ANCHOR_SCENE = int(PanelAnchor::Scene)

.. sq:attribute:: const PANEL_ANCHOR_VRSPACE = int(PanelAnchor::VRSpace)

.. sq:attribute:: const PANEL_ANCHOR_HEAD = int(PanelAnchor::Head)

.. sq:attribute:: const PANEL_ANCHOR_LEFTHAND = int(PanelAnchor::LeftHand)

.. sq:attribute:: const PANEL_ANCHOR_RIGHTHAND = int(PanelAnchor::RightHand)

.. sq:attribute:: const PANEL_ANCHOR_ENTITY = int(PanelAnchor::Entity)

.. sq:attribute:: const PANEL_GEOMETRY_NONE = int(PanelGeometry::None)

.. sq:attribute:: const PANEL_GEOMETRY_RECTANGLE = int(PanelGeometry::Rectangle)

.. sq:attribute:: const PANEL_RC_NONE = int(PanelRotationConstraint::None)

.. sq:attribute:: const PANEL_RC_FACE_LEFT_HAND = int(PanelRotationConstraint::FaceLeftHand)

.. sq:attribute:: const PANEL_RC_FACE_RIGHT_HAND = int(PanelRotationConstraint::FaceRightHand)

.. sq:attribute:: const PANEL_RC_FACE_HEAD = int(PanelRotationConstraint::FaceHead)

.. sq:attribute:: const PANEL_RC_FACE_HEAD_LOCK_Y = int(PanelRotationConstraint::FaceHeadLockY)

.. sq:attribute:: const PANEL_RC_FACE_ENTITY = int(PanelRotationConstraint::FaceEntity)

.. sq:attribute:: const PANEL_RENDER_CAST_SHADOW = int(darg_panel_renderer::RenderFeatures::CastShadow)

.. sq:attribute:: const PANEL_RENDER_OPAQUE = int(darg_panel_renderer::RenderFeatures::Opaque)

.. sq:attribute:: const PANEL_RENDER_ALWAYS_ON_TOP = int(darg_panel_renderer::RenderFeatures::AlwaysOnTop)

--------------
class GuiScene
--------------

.. sq:function:: method GuiScene.setUpdateHandler(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: closure_and_nativeclosure or null

  ``nparamscheck:2``

  ``typecheck mask: class_instance, closure_and_nativeclosure or null``

.. sq:function:: method GuiScene.setShutdownHandler(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: closure_and_nativeclosure or null

  ``nparamscheck:2``

  ``typecheck mask: class_instance, closure_and_nativeclosure or null``

.. sq:function:: method GuiScene.setHotkeysNavHandler(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: closure_and_nativeclosure or null

  ``nparamscheck:2``

  ``typecheck mask: class_instance, closure_and_nativeclosure or null``

.. sq:function:: method GuiScene.addPanel(arg0, arg1, arg2)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: closure_and_nativeclosure or table

  ``nparamscheck:3``

  ``typecheck mask: class_instance, integer, closure_and_nativeclosure or table``

.. sq:function:: method GuiScene.removePanel(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer

  ``nparamscheck:2``

  ``typecheck mask: class_instance, integer``

.. sq:function:: method GuiScene.mark_panel_dirty(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer

  ``nparamscheck:2``

  ``typecheck mask: class_instance, integer``

.. sq:function:: method GuiScene.setXmbFocus(arg0, arg1, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: null or table

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-2``

  ``typecheck mask: class_instance, null or table``

.. sq:function:: method GuiScene.getCompAABBbyKey()

.. sq:function:: method GuiScene.setConfigProps(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: any_type

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: table

  ``nparamscheck:2``

  ``typecheck mask: any_type, table``

.. sq:function:: method GuiScene.haveActiveCursorOnPanels()

.. sq:function:: method GuiScene.clearTimer()

.. sq:attribute:: property GuiScene.config

  ``readonly``

.. sq:function:: method GuiScene.getAllObservables()

.. sq:attribute:: property GuiScene.cursorPresent

  ``readonly``

.. sq:attribute:: property GuiScene.cursorOverStickScroll

  ``readonly``

.. sq:attribute:: property GuiScene.cursorOverClickable

  ``readonly``

.. sq:attribute:: property GuiScene.hoveredClickableInfo

  ``readonly``

.. sq:attribute:: property GuiScene.keyboardLayout

  ``readonly``

.. sq:attribute:: property GuiScene.keyboardLocks

  ``readonly``

.. sq:attribute:: property GuiScene.updateCounter

  ``readonly``

.. sq:attribute:: property GuiScene.circleButtonAsAction

  ``readonly``

.. sq:attribute:: property GuiScene.xmbMode

  ``readonly``

.. sq:function:: method GuiScene.getJoystickAxis()

.. sq:function:: method GuiScene.enableInput()





-----------------
class SceneConfig
-----------------

.. sq:attribute:: const SceneConfig.defaultFont

.. sq:attribute:: const SceneConfig.defaultFontSize

.. sq:attribute:: const SceneConfig.kbCursorControl

.. sq:attribute:: const SceneConfig.gamepadCursorControl

.. sq:attribute:: const SceneConfig.gamepadCursorSpeed

.. sq:attribute:: const SceneConfig.gamepadCursorHoverMaxTime

.. sq:attribute:: const SceneConfig.gamepadCursorAxisV

.. sq:attribute:: const SceneConfig.gamepadCursorAxisH

.. sq:attribute:: const gamepadCursorHoverMinMul

.. sq:attribute:: const SceneConfig.gamepadCursorHoverMaxMul

.. sq:attribute:: const SceneConfig.gamepadCursorDeadZone

.. sq:attribute:: const SceneConfig.gamepadCursorNonLin

.. sq:attribute:: const SceneConfig.reportNestedWatchedUpdate

.. sq:attribute:: const SceneConfig.joystickScrollAxisH

.. sq:attribute:: const SceneConfig.joystickScrollAxisV

.. sq:attribute:: const SceneConfig.clickRumbleEnabled

.. sq:attribute:: const SceneConfig.clickRumbleLoFreq

.. sq:attribute:: const SceneConfig.clickRumbleHiFreq

.. sq:attribute:: const SceneConfig.clickRumbleDuration

.. sq:attribute:: const SceneConfig.dirPadRepeatDelay

.. sq:attribute:: const SceneConfig.dirPadRepeatTime

.. sq:attribute:: const SceneConfig.useDefaultCursor

.. sq:attribute:: const SceneConfig.defaultCursor

.. sq:attribute:: const SceneConfig.clickPriority

.. sq:attribute:: property SceneConfig.defSceneBgColor

.. sq:function:: method SceneConfig.setClickButtons(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: array

  ``nparamscheck:2``

  ``typecheck mask: class_instance, array``

.. sq:function:: method SceneConfig.getClickButtons(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``





.. sq:function:: function anim_start()

.. sq:function:: function anim_request_stop()

.. sq:function:: function anim_skip()

.. sq:function:: function anim_skip_delay()

.. sq:function:: function set_kb_focus()

.. sq:function:: function capture_kb_focus()

.. sq:function:: function calc_comp_size(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: null or table or closure_and_nativeclosure or class_instance or class

  ``nparamscheck:2``

  ``typecheck mask: any_type, null or table or closure_and_nativeclosure or class_instance or class``

.. sq:function:: function move_mouse_cursor(arg0, arg1, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: any_type

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: bool

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-2``

  ``typecheck mask: any_type, any_type, bool``

.. sq:function:: function get_mouse_cursor_pos(arg0, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-1``

  ``typecheck mask: any_type, class_instance``

.. sq:function:: function resolve_button_id(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  ``nparamscheck:2``

  ``typecheck mask: any_type, string``

.. sq:attribute:: gui_scene = instance of GuiScene

  ``type: GuiScene``

.. sq:attribute:: const FLOW_PARENT_RELATIVE

.. sq:attribute:: const ALIGN_LEFT = ALIGN_LEFT

.. sq:attribute:: const ALIGN_TOP = ALIGN_TOP

.. sq:attribute:: const ALIGN_RIGHT = ALIGN_RIGHT

.. sq:attribute:: const ALIGN_BOTTOM = ALIGN_BOTTOM

.. sq:attribute:: const ALIGN_CENTER = ALIGN_CENTER

.. sq:attribute:: const VECTOR_WIDTH

.. sq:attribute:: const VECTOR_CENTER_LINE

.. sq:attribute:: const VECTOR_LINE_INDENT_PX

.. sq:attribute:: const VECTOR_POLY

.. sq:attribute:: const VECTOR_QUADS

.. sq:attribute:: const FFT_NONE

.. sq:attribute:: const O_HORIZONTAL

.. sq:attribute:: const TOVERFLOW_CLIP

.. sq:attribute:: const DIR_UP

.. sq:attribute:: const EVENT_BREAK = GuiScene::EVENT_BREAK

.. sq:attribute:: const EVENT_CONTINUE = GuiScene::EVENT_CONTINUE

.. sq:attribute:: const Linear

Easing function for prebuilt animations functions.

.. sq:attribute:: const InQuad

Easing function for prebuilt animations functions.

.. sq:attribute:: const OutQuad

Easing function for prebuilt animations functions.

.. sq:attribute:: const InOutQuad

Easing function for prebuilt animations functions.

.. sq:attribute:: const InCubic

Easing function for prebuilt animations functions.

.. sq:attribute:: const OutCubic

Easing function for prebuilt animations functions.

.. sq:attribute:: const InOutCubic

Easing function for prebuilt animations functions.

.. sq:attribute:: const InQuintic

Easing function for prebuilt animations functions.

.. sq:attribute:: const OutQuintic

Easing function for prebuilt animations functions.

.. sq:attribute:: const InOutQuintic

Easing function for prebuilt animations functions.

.. sq:attribute:: const InQuart

Easing function for prebuilt animations functions.

.. sq:attribute:: const OutQuart

Easing function for prebuilt animations functions.

.. sq:attribute:: const InOutQuart

Easing function for prebuilt animations functions.

.. sq:attribute:: const InSine

Easing function for prebuilt animations functions.

.. sq:attribute:: const OutSine

Easing function for prebuilt animations functions.

.. sq:attribute:: const InOutSine

Easing function for prebuilt animations functions.

.. sq:attribute:: const InCirc

Easing function for prebuilt animations functions.

.. sq:attribute:: const OutCirc

Easing function for prebuilt animations functions.

.. sq:attribute:: const InOutCirc

Easing function for prebuilt animations functions.

.. sq:attribute:: const InExp

Easing function for prebuilt animations functions.

.. sq:attribute:: const OutExp

Easing function for prebuilt animations functions.

.. sq:attribute:: const InOutExp

Easing function for prebuilt animations functions.

.. sq:attribute:: const InElastic

Easing function for prebuilt animations functions.

.. sq:attribute:: const OutElastic

Easing function for prebuilt animations functions.

.. sq:attribute:: const InOutElastic

Easing function for prebuilt animations functions.

.. sq:attribute:: const InBack

Easing function for prebuilt animations functions.

.. sq:attribute:: const OutBack

Easing function for prebuilt animations functions.

.. sq:attribute:: const InOutBack

Easing function for prebuilt animations functions.

.. sq:attribute:: const InBounce

Easing function for prebuilt animations functions.

.. sq:attribute:: const OutBounce

Easing function for prebuilt animations functions.

.. sq:attribute:: const InOutBounce

Easing function for prebuilt animations functions.

.. sq:attribute:: const InOutBezier

Easing function for prebuilt animations functions.

.. sq:attribute:: const CosineFull

Easing function for prebuilt animations functions.

.. sq:attribute:: const InStep

Easing function for prebuilt animations functions.

.. sq:attribute:: const OutStep

Easing function for prebuilt animations functions.

.. sq:attribute:: const Blink

Easing function for prebuilt animations functions.

.. sq:attribute:: const DoubleBlink

Easing function for prebuilt animations functions.

.. sq:attribute:: const BlinkSin

Easing function for prebuilt animations functions.

.. sq:attribute:: const BlinkCos

Easing function for prebuilt animations functions.

.. sq:attribute:: const Discrete8

Easing function for prebuilt animations functions.

.. sq:attribute:: const Shake4

Easing function for prebuilt animations functions.

.. sq:attribute:: const Shake6

Easing function for prebuilt animations functions.

.. sq:attribute:: const S_KB_FOCUS

State flag for keyboard focus.

.. sq:attribute:: const S_HOVER

.. sq:attribute:: const S_TOP_HOVER

.. sq:attribute:: const S_ACTIVE

state flag for 'pressed' button.

.. sq:attribute:: const S_MOUSE_ACTIVE

state flag for 'pressed' button with mouse.

.. sq:attribute:: const S_KBD_ACTIVE

state flag for 'pressed' button with keyboard.

.. sq:attribute:: const S_HOTKEY_ACTIVE

state flag for 'pressed' button with hotkey.

.. sq:attribute:: const S_TOUCH_ACTIVE

state flag for pressed button with touch device.

.. sq:attribute:: const S_JOYSTICK_ACTIVE

state flag for pressed button with joystick/gamepad device.

.. sq:attribute:: const S_VR_ACTIVE

state flag for pressed button with VR controller.

.. sq:attribute:: const S_DRAG

state flag for dragged state.

.. sq:attribute:: const MR_NONE

MOVE_RESIZE Beahvior constants, to define where was point started move or resize

.. sq:attribute:: const MR_T

.. sq:attribute:: const MR_R

.. sq:attribute:: const MR_B

.. sq:attribute:: const MR_L

.. sq:attribute:: const MR_LT

.. sq:attribute:: const MR_RT

.. sq:attribute:: const MR_LB

.. sq:attribute:: const MR_RB

.. sq:attribute:: const MR_AREA

.. sq:attribute:: const FMT_NO_WRAP

.. sq:attribute:: const FMT_KEEP_SPACES

.. sq:attribute:: const FMT_IGNORE_TAGS

.. sq:attribute:: const FMT_HIDE_ELLIPSIS

.. sq:attribute:: const FMT_AS_IS

.. sq:attribute:: const DEVID_KEYBOARD

.. sq:attribute:: const KEEP_ASPECT_NONE

.. sq:attribute:: const KEEP_ASPECT_FIT

.. sq:attribute:: const KEEP_ASPECT_FILL

.. sq:attribute:: const AXIS_L_THUMB_H

.. sq:attribute:: const AXIS_L_THUMB_V

.. sq:attribute:: const AXIS_R_THUMB_H

.. sq:attribute:: const AXIS_R_THUMB_V

.. sq:attribute:: const AXIS_L_TRIGGER

.. sq:attribute:: const AXIS_R_TRIGGER

.. sq:attribute:: const AXIS_LR_TRIGGER

.. sq:attribute:: const XMB_STOP

.. sq:attribute:: const R_PROCESSED

.. sq:attribute:: const SIZE_TO_CONTENT

.. sq:attribute:: Fonts





-------------
enum AnimProp
-------------




.. sq:attribute:: color

.. sq:attribute:: bgColor

.. sq:attribute:: fgColor

.. sq:attribute:: fillColor

.. sq:attribute:: borderColor

.. sq:attribute:: opacity

.. sq:attribute:: rotate

.. sq:attribute:: scale

.. sq:attribute:: translate

.. sq:attribute:: fValue

.. sq:attribute:: picSaturate

.. sq:attribute:: brightness





---------------
table Behaviors
---------------
.. sq:attribute:: const Behaviors.Button

.. sq:attribute:: const Behaviors.TextArea

.. sq:attribute:: const Behaviors.TextInput

.. sq:attribute:: const Behaviors.Slider

.. sq:attribute:: const Behaviors.Pannable

.. sq:attribute:: const Behaviors.Pannable2touch

.. sq:attribute:: const Behaviors.SwipeScroll

.. sq:attribute:: const Behaviors.MoveResize

.. sq:attribute:: const Behaviors.ComboPopup

.. sq:attribute:: const Behaviors.SmoothScrollStack

.. sq:attribute:: const Behaviors.Marquee

.. sq:attribute:: const Behaviors.WheelScroll

.. sq:attribute:: const Behaviors.ScrollEvent

.. sq:attribute:: const Behaviors.InspectPicker

.. sq:attribute:: const Behaviors.RtPropUpdate

.. sq:attribute:: const Behaviors.RecalcHandler

.. sq:attribute:: const Behaviors.DragAndDrop

.. sq:attribute:: const Behaviors.FpsBar

.. sq:attribute:: const Behaviors.LatencyBar

.. sq:attribute:: const Behaviors.OverlayTransparency

.. sq:attribute:: const Behaviors.BoundToArea

.. sq:attribute:: const Behaviors.Movie

.. sq:attribute:: const Behaviors.Parallax

.. sq:attribute:: const Behaviors.PieMenu

.. sq:attribute:: const Behaviors.TransitionSize

.. sq:attribute:: const Behaviors.TrackMouse

.. sq:attribute:: const Behaviors.MoveToArea

.. sq:attribute:: const Behaviors.ProcessPointingInput

.. sq:attribute:: const Behaviors.EatInput






-------------------
class ScrollHandler
-------------------

.. sq:method:: ScrollHandler()

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

.. sq:function:: method ScrollHandler.scrollToX()

.. sq:function:: method ScrollHandler.scrollToY()

.. sq:function:: method ScrollHandler.scrollToChildren()

.. sq:attribute:: property ScrollHandler.elem

  ``readonly``





----------------------------
class JoystickAxisObservable
----------------------------

.. sq:attribute:: property JoystickAxisObservable.value

  ``readonly``

.. sq:attribute:: var JoystickAxisObservable.resolution

.. sq:attribute:: var JoystickAxisObservable.deadzone





---------------
class ElemGroup
---------------





--------------
class Behavior
--------------





-------------
class Picture
-------------

.. sq:method:: Picture(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: null or string

  ``typecheck mask: any_type, null or string``





-------------------------------
class Immediate extends Picture
-------------------------------

.. sq:method:: Immediate(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: null or string

  ``typecheck mask: any_type, null or string``





-------------------
class FormattedText
-------------------





---------------------
class IGenVideoPlayer
---------------------





---------------
class IGenSound
---------------





----------------------
class DragAndDropState
----------------------





-------------------
class EventDataRect
-------------------

.. sq:attribute:: EventDataRect.l

.. sq:attribute:: EventDataRect.t

.. sq:attribute:: EventDataRect.r

.. sq:attribute:: EventDataRect.b





-------------------------
class MouseClickEventData
-------------------------

.. sq:attribute:: property MouseClickEventData.targetRect

  ``readonly``





---------------------
class HotkeyEventData
---------------------

.. sq:attribute:: property HotkeyEventData.targetRect

  ``readonly``





--------------------
class HoverEventData
--------------------

.. sq:attribute:: property HoverEventData.targetRect

  ``readonly``

.. sq:method:: HoverEventData()





----------------------
class MoveToAreaTarget
----------------------

.. sq:function:: method MoveToAreaTarget.set()

.. sq:function:: method MoveToAreaTarget.clear()





.. sq:function:: function Color(arg0, arg1, arg2, arg3, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: integer_or_float

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer_or_float

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: integer_or_float

  :param arg3: autodoc from typemask/paramscheck
  :type arg3: integer_or_float

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-4``

  ``typecheck mask: any_type, integer_or_float, integer_or_float, integer_or_float, integer_or_float``

.. sq:function:: function sw(percent)

  :param percent:  
  :type percent: float

  :return: float

.. sq:function:: function sh(percent)

  :param percent:  
  :type percent: float

  :return: float

.. sq:function:: function flex(arg0, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: integer_or_float

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-1``

  ``typecheck mask: any_type, integer_or_float``

.. sq:function:: function fontH(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: integer_or_float

  ``nparamscheck:2``

  ``typecheck mask: any_type, integer_or_float``

.. sq:function:: function pw(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: integer_or_float

  ``nparamscheck:2``

  ``typecheck mask: any_type, integer_or_float``

.. sq:function:: function ph(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: integer_or_float

  ``nparamscheck:2``

  ``typecheck mask: any_type, integer_or_float``

.. sq:function:: function elemw(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: integer_or_float

  ``nparamscheck:2``

  ``typecheck mask: any_type, integer_or_float``

.. sq:function:: function elemh(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: integer_or_float

  ``nparamscheck:2``

  ``typecheck mask: any_type, integer_or_float``

.. sq:function:: function locate_element_source(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:2``

  ``typecheck mask: any_type, class_instance``

.. sq:function:: function get_element_info(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:2``

  ``typecheck mask: any_type, class_instance``

.. sq:function:: function get_font_metrics(fontId, fontHt)

  :param fontId:  
  :type fontId: integer

  :param fontHt: optional, default is _def_fontHt font height set in font
  :type fontHt: float

  ``nparamscheck:-2``

  ``typecheck mask: any_type, integer``

  :return: font_params
  :rtype: table




.. code-block:: 
    :caption: font_params
    

    {
      _def_fontHt : def height
      fontHt : height
      capsHt : height of H
      lineSpacing : linespacing
      ascent
      descent
      lowercaseHeight : height of x
    }
    @code



.. sq:function:: function setFontDefHt(font_name, pix_ht)

  :param font_name:  
  :type font_name: string

  :param pix_ht:  
  :type pix_ht: integer

  :return: bool

.. sq:function:: function getFontDefHt(font_name)

  :param font_name:  
  :type font_name: string

  :return: integer

.. sq:function:: function getFontInitialHt(font_name)

  :param font_name:  
  :type font_name: string

  :return: integer

.. sq:function:: function calc_str_box(element_or_text, element_or_style)

  :param element_or_text: should be string of text or darg component description with 'text' in it
  :type element_or_text: string|closure_and_nativeclosure|table

  :param element_or_style: optional, if first element is text, it should be provided with font properties
  :type element_or_style: table|closure_and_nativeclosure|null

  ``nparamscheck:-2``

  ``typecheck mask: any_type``

  :return: return array of two objects with width and height of text
  :rtype: array




----------------
class ElementRef
----------------

.. sq:function:: method ElementRef.getCompDesc()

.. sq:function:: method ElementRef.getScreenPosX(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

.. sq:function:: method ElementRef.getScreenPosY(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

.. sq:function:: method ElementRef.getWidth(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

.. sq:function:: method ElementRef.getHeight(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

.. sq:function:: method ElementRef.getContentWidth(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

.. sq:function:: method ElementRef.getContentHeight(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

.. sq:function:: method ElementRef.getScrollOffsX(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

.. sq:function:: method ElementRef.getScrollOffsY(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``





-------------------------------------
class LottieAnimation extends Picture
-------------------------------------

.. sq:method:: LottieAnimation(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: null or string

  ``typecheck mask: any_type, null or string``






