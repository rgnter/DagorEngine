.. autogenerated

***************
dagor.workcycle
***************

module 'dagor.workcycle'



*Source file: prog/gameLibs/quirrel/bindQuirrelEx/dagorWorkCycle.cpp*

Usage::

  let { add_cycle_action, remove_cycle_action, defer, deferOnce, setTimeout, resetTimeout, setInterval, clearTimer } = require("dagor.workcycle")

or::

  from "dagor.workcycle" import *

.. code-block:: sq

  //'dagor.workcycle' exports:
  {
    function add_cycle_action(tag, func): string, closure_and_nativeclosure -> null
    function remove_cycle_action()
    function defer(arg0): closure_and_nativeclosure -> _undocumented_
    function deferOnce(arg0): closure_and_nativeclosure -> _undocumented_
    function setTimeout(time_in_seconds, func, id = null): integer_or_float, closure_and_nativeclosure, any_type -> _undocumented_
    function resetTimeout(time_in_seconds, func, id = null): integer_or_float, closure_and_nativeclosure, any_type -> _undocumented_
    function setInterval(period_in_seconds, func, id = null): integer_or_float, closure_and_nativeclosure, any_type -> _undocumented_
    function clearTimer(&id_): sqObject -> null
  }
  

.. sq:function:: function add_cycle_action(tag, func)

  :param tag:  
  :type tag: string

  :param func:  
  :type func: closure_and_nativeclosure

  :return: null

.. sq:function:: function remove_cycle_action()

.. sq:function:: function defer(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: closure_and_nativeclosure

  ``nparamscheck:2``

  ``typecheck mask: any_type, closure_and_nativeclosure``

.. sq:function:: function deferOnce(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: closure_and_nativeclosure

  ``nparamscheck:2``

  ``typecheck mask: any_type, closure_and_nativeclosure``



.. sq:function:: function setTimeout(time_in_seconds, func, id = null)

  :param time_in_seconds: time in seconds on which function would be called
  :type time_in_seconds: integer_or_float

  :param func: function to be called on time
  :type func: closure_and_nativeclosure

  :param id: optional id of timer. If not provided closure 'func' is used as id
  :type id: any_type





.. sq:function:: function resetTimeout(time_in_seconds, func, id = null)

  :param time_in_seconds: time in seconds on which function would be called
  :type time_in_seconds: integer_or_float

  :param func: function to be called on time
  :type func: closure_and_nativeclosure

  :param id: optional id of timer. If not provided closure 'func' is used as id
  :type id: any_type





.. sq:function:: function setInterval(period_in_seconds, func, id = null)

  :param period_in_seconds: period of time in seconds on which function would be called
  :type period_in_seconds: integer_or_float

  :param func: function to be called on time
  :type func: closure_and_nativeclosure

  :param id: optional id of timer. If not provided closure 'func' is used as id
  :type id: any_type




.. sq:function:: function clearTimer(&id_)

  :param &id_:  
  :type &id_: sqObject

  :return: null


