.. autogenerated

***
frp
***

module 'frp'



*Source file: prog/gameLibs/quirrel/frp/frp.cpp*

Usage::

  let { Watched, Computed, set_nested_observable_debug, make_all_observables_immutable, FRP_INITIAL, FRP_DONT_CHECK_NESTED } = require("frp")

or::

  from "frp" import *

.. code-block:: sq

  //'frp' exports:
  {
    class Watched
    class Computed
    function set_nested_observable_debug(arg0): bool -> _undocumented_
    function make_all_observables_immutable(arg0): bool -> _undocumented_
    const FRP_INITIAL
    const FRP_DONT_CHECK_NESTED
  }
  

-------------
class Watched
-------------

.. sq:method:: Watched()

.. sq:attribute:: property Watched.value

  ``readonly``

.. sq:function:: method Watched.get()

.. sq:attribute:: property Watched.timeChangeReq

  ``readonly``

.. sq:attribute:: property Watched.timeChanged

  ``readonly``

.. sq:function:: method Watched.trigger(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

.. sq:function:: method Watched.trace()

.. sq:function:: method Watched.whiteListMutatorClosure()

.. sq:function:: method Watched.update(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: any_type

  ``nparamscheck:2``

  ``typecheck mask: class_instance``

.. sq:function:: method Watched.set(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: any_type

  ``nparamscheck:2``

  ``typecheck mask: class_instance``

.. sq:function:: method Watched.modify(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: closure_and_nativeclosure

  ``nparamscheck:2``

  ``typecheck mask: class_instance, closure_and_nativeclosure``

.. sq:function:: operator Watched._call(arg0, arg1, arg2)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: any_type

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: any_type

  ``nparamscheck:3``

  ``typecheck mask: class_instance``

.. sq:function:: method Watched.mutate(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: closure_and_nativeclosure

  ``nparamscheck:2``

  ``typecheck mask: class_instance, closure_and_nativeclosure``

.. sq:function:: operator Watched._newslot(arg0, arg1, arg2)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: any_type

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: any_type

  ``nparamscheck:3``

  ``typecheck mask: class_instance``

.. sq:function:: operator Watched._delslot(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: any_type

  ``nparamscheck:2``

  ``typecheck mask: class_instance``





------------------------------
class Computed extends Watched
------------------------------

.. sq:method:: Computed()

.. sq:function:: method Computed.update()

.. sq:function:: method Computed.mutate()

.. sq:function:: method Computed.modify()

.. sq:function:: operator Computed._call()

.. sq:function:: operator Computed._set()

.. sq:function:: operator Computed._newslot()

.. sq:function:: operator Computed._delslot()

.. sq:function:: method Computed.getSources(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``





.. sq:function:: function set_nested_observable_debug(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: bool

  ``nparamscheck:2``

  ``typecheck mask: any_type, bool``

.. sq:function:: function make_all_observables_immutable(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: bool

  ``nparamscheck:2``

  ``typecheck mask: any_type, bool``

.. sq:attribute:: const FRP_INITIAL

.. sq:attribute:: const FRP_DONT_CHECK_NESTED


