.. autogenerated

**********
dagor.http
**********

module 'dagor.http'



*Source file: prog/gameLibs/quirrel/http/sqHttpClient.cpp*

Usage::

  let { requestHttp, httpRequest, httpAbort, HTTP_SUCCESS, HTTP_FAILED, HTTP_ABORTED } = require("dagor.http")

or::

  from "dagor.http" import *

.. code-block:: sq

  //'dagor.http' exports:
  {
    function requestHttp({method, url, userAgent, headers, data, callback, context, respEventId, timeout_ms, waitable, needResponseHeaders = "default)"}): table -> integer
    function httpRequest(arg0): table -> _undocumented_
    function httpAbort(request_id): integer -> _undocumented_
    value HTTP_SUCCESS
    value HTTP_FAILED
    value HTTP_ABORTED
  }
  

.. sq:function:: function requestHttp({method, url, userAgent, headers, data, callback, context, respEventId, timeout_ms, waitable, needResponseHeaders = "default)"})

  :param method: ("POST" (default), "GET", "HEAD"), optional
  :type method: string

  :param url:  
  :type url: string

  :param userAgent: (optional)
  :type userAgent: string

  :param headers: {string:string} (optional)
  :type headers: table

  :param data: (optional)
  :type data: string|table|class_instance|class

  :param callback: ({status, http_code, response, headers}), optional
  :type callback: any_type

  :param context: user data specific for request response, optional
  :type context: table

  :param respEventId: (optional) : event id to send into eventbus
  :type respEventId: string

  :param timeout_ms: (optional), DEF_REQUEST_TIMEOUT_MS by default (10 seconds)
  :type timeout_ms: integer

  :param waitable: (optional, false by default) : if true then this request will be waited for on app shutdown
  :type waitable: bool

  :param needResponseHeaders:  , default = default)
  :type needResponseHeaders: by

  ``Function is kwarged - arguments passed in a table``

  :return: request id
  :rtype: integer





response in eventbus data or in callback will be table


.. code-block:: 
    :caption: response
    

    {
      "status" : integer (SUCCESS, FAILED, ABORTED)
      "http_code" : integer
      "context" : null | table | string
      "headers" : table, optional
      "reponce" : blob, optional
    }



.. sq:function:: function httpRequest(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: table

  ``nparamscheck:2``

  ``typecheck mask: any_type, table``

.. sq:function:: function httpAbort(request_id)

  :param request_id:  
  :type request_id: integer

  ``nparamscheck:2``

  ``typecheck mask: any_type, integer``

.. sq:attribute:: HTTP_SUCCESS

.. sq:attribute:: HTTP_FAILED

.. sq:attribute:: HTTP_ABORTED


