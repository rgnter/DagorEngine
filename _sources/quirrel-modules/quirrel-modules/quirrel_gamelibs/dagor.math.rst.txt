.. autogenerated

**********
dagor.math
**********

module 'dagor.math'



*Source file: prog/gameLibs/quirrel/bindQuirrelEx/sqratDagorMath.cpp*

Usage::

  let { Point2, Point3, DPoint3, Point4, TMatrix, Quat, IPoint2, IPoint3, E3DCOLOR, Color3, Color4, matrix_to_euler, euler_to_quat, dir_to_quat, quat_to_euler, quat_to_matrix, quat_rotation_arc, qinterp, cvt, make_tm_quat, make_tm_axis } = require("dagor.math")

or::

  from "dagor.math" import *

.. code-block:: sq

  //'dagor.math' exports:
  {
    class Point2
    class Point3
    class DPoint3
    class Point4
    class TMatrix
    class Quat
    class IPoint2
    class IPoint3
    class E3DCOLOR
    class Color3
    class Color4
    function matrix_to_euler(&tm): TMatrix -> integer
    function euler_to_quat(&e): integer -> inline Quat
    function dir_to_quat(&p): integer -> inline Quat
    function quat_to_euler(&quat): Quat -> integer
    function quat_to_matrix(&quat): Quat -> inline TMatrix
    function quat_rotation_arc()
    function qinterp()
    function cvt()
    function make_tm_quat()
    function make_tm_axis()
  }
  

------------
class Point2
------------

.. sq:method:: Point2(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance or integer_or_float

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer_or_float

  ``typecheck mask: any_type, class_instance or integer_or_float, integer_or_float``

.. sq:attribute:: var Point2.x

.. sq:attribute:: var Point2.y

.. sq:function:: method Point2.lengthSq()

.. sq:function:: method Point2.length()

.. sq:function:: method Point2.normalize()

.. sq:function:: operator Point2._add(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: class_instance

  ``nparamscheck:2``

  ``typecheck mask: class_instance, class_instance``

.. sq:function:: operator Point2._sub(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: class_instance

  ``nparamscheck:2``

  ``typecheck mask: class_instance, class_instance``

.. sq:function:: operator Point2._mul(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: class_instance or integer_or_float

  ``nparamscheck:2``

  ``typecheck mask: class_instance, class_instance or integer_or_float``

.. sq:function:: operator Point2._unm(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``





------------
class Point3
------------

.. sq:method:: Point3(arg0, arg1, arg2)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance or integer_or_float

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer_or_float

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: integer_or_float

  ``typecheck mask: any_type, class_instance or integer_or_float, integer_or_float, integer_or_float``

.. sq:attribute:: var Point3.x

.. sq:attribute:: var Point3.y

.. sq:attribute:: var Point3.z

.. sq:function:: method Point3.lengthSq()

.. sq:function:: method Point3.length()

.. sq:function:: method Point3.normalize()

.. sq:function:: operator Point3._add(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: class_instance

  ``nparamscheck:2``

  ``typecheck mask: class_instance, class_instance``

.. sq:function:: operator Point3._sub(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: class_instance

  ``nparamscheck:2``

  ``typecheck mask: class_instance, class_instance``

.. sq:function:: operator Point3._mul(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: class_instance or integer_or_float

  ``nparamscheck:2``

  ``typecheck mask: class_instance, class_instance or integer_or_float``

.. sq:function:: operator Point3._modulo(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: class_instance

  ``nparamscheck:2``

  ``typecheck mask: class_instance, class_instance``

.. sq:function:: operator Point3._unm(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``





-------------
class DPoint3
-------------

.. sq:method:: DPoint3(arg0, arg1, arg2)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance or integer_or_float

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer_or_float

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: integer_or_float

  ``typecheck mask: any_type, class_instance or integer_or_float, integer_or_float, integer_or_float``

.. sq:attribute:: var DPoint3.x

.. sq:attribute:: var DPoint3.y

.. sq:attribute:: var DPoint3.z

.. sq:function:: method DPoint3.lengthSq()

.. sq:function:: method DPoint3.length()

.. sq:function:: method DPoint3.normalize()





------------
class Point4
------------

.. sq:method:: Point4(arg0, arg1, arg2, arg3)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance or integer_or_float

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer_or_float

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: integer_or_float

  :param arg3: autodoc from typemask/paramscheck
  :type arg3: integer_or_float

  ``typecheck mask: any_type, class_instance or integer_or_float, integer_or_float, integer_or_float, integer_or_float``

.. sq:attribute:: var Point4.x

.. sq:attribute:: var Point4.y

.. sq:attribute:: var Point4.z

.. sq:attribute:: var Point4.w

.. sq:function:: method Point4.lengthSq()

.. sq:function:: method Point4.length()

.. sq:function:: operator Point4._add(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: class_instance

  ``nparamscheck:2``

  ``typecheck mask: class_instance, class_instance``

.. sq:function:: operator Point4._sub(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: class_instance

  ``nparamscheck:2``

  ``typecheck mask: class_instance, class_instance``

.. sq:function:: operator Point4._mul(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: class_instance or integer_or_float

  ``nparamscheck:2``

  ``typecheck mask: class_instance, class_instance or integer_or_float``

.. sq:function:: operator Point4._modulo(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: class_instance

  ``nparamscheck:2``

  ``typecheck mask: class_instance, class_instance``

.. sq:function:: operator Point4._unm(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``





-------------
class TMatrix
-------------

.. sq:method:: TMatrix(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``typecheck mask: any_type, class_instance``

.. sq:function:: method TMatrix.orthonormalize()

.. sq:function:: operator TMatrix._mul(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: class_instance or integer_or_float

  ``nparamscheck:2``

  ``typecheck mask: class_instance, class_instance or integer_or_float``

.. sq:function:: operator TMatrix._add(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: class_instance

  ``nparamscheck:2``

  ``typecheck mask: class_instance, class_instance``

.. sq:function:: operator TMatrix._sub(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: class_instance

  ``nparamscheck:2``

  ``typecheck mask: class_instance, class_instance``

.. sq:function:: operator TMatrix._modulo(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: class_instance

  ``nparamscheck:2``

  ``typecheck mask: class_instance, class_instance``

.. sq:function:: operator TMatrix._set(arg0, arg1, arg2, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer_or_float

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: class_instance or integer_or_float

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-3``

  ``typecheck mask: class_instance, integer_or_float, class_instance or integer_or_float``

.. sq:function:: method TMatrix.setcol(arg0, arg1, arg2, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer_or_float

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: class_instance or integer_or_float

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-3``

  ``typecheck mask: class_instance, integer_or_float, class_instance or integer_or_float``

.. sq:function:: operator TMatrix._unm(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

.. sq:function:: method TMatrix.inverse()

.. sq:function:: operator TMatrix._get(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: any_type

  ``nparamscheck:2``

  ``typecheck mask: class_instance``

.. sq:function:: method TMatrix.getcol(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: any_type

  ``nparamscheck:2``

  ``typecheck mask: class_instance``





----------
class Quat
----------

.. sq:method:: Quat(arg0, arg1, arg2, arg3)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance or integer_or_float

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer_or_float

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: integer_or_float

  :param arg3: autodoc from typemask/paramscheck
  :type arg3: integer_or_float

  ``typecheck mask: any_type, class_instance or integer_or_float, integer_or_float, integer_or_float, integer_or_float``

.. sq:attribute:: var Quat.x

.. sq:attribute:: var Quat.y

.. sq:attribute:: var Quat.z

.. sq:attribute:: var Quat.w

.. sq:function:: operator Quat._mul(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: class_instance

  ``nparamscheck:2``

  ``typecheck mask: class_instance, class_instance``

.. sq:function:: operator Quat._unm(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

.. sq:function:: method Quat.normalize()





-------------
class IPoint2
-------------

.. sq:method:: IPoint2(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance or integer_or_float

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer_or_float

  ``typecheck mask: any_type, class_instance or integer_or_float, integer_or_float``

.. sq:attribute:: var IPoint2.x

.. sq:attribute:: var IPoint2.y

.. sq:function:: operator IPoint2._add(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: class_instance

  ``nparamscheck:2``

  ``typecheck mask: class_instance, class_instance``

.. sq:function:: operator IPoint2._sub(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: class_instance

  ``nparamscheck:2``

  ``typecheck mask: class_instance, class_instance``

.. sq:function:: operator IPoint2._unm(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``





-------------
class IPoint3
-------------

.. sq:method:: IPoint3(arg0, arg1, arg2)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance or integer_or_float

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer_or_float

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: integer_or_float

  ``typecheck mask: any_type, class_instance or integer_or_float, integer_or_float, integer_or_float``

.. sq:attribute:: var IPoint3.x

.. sq:attribute:: var IPoint3.y

.. sq:attribute:: var IPoint3.z

.. sq:function:: operator IPoint3._add(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: class_instance

  ``nparamscheck:2``

  ``typecheck mask: class_instance, class_instance``

.. sq:function:: operator IPoint3._sub(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: class_instance

  ``nparamscheck:2``

  ``typecheck mask: class_instance, class_instance``

.. sq:function:: operator IPoint3._unm(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``





--------------
class E3DCOLOR
--------------

.. sq:method:: E3DCOLOR(arg0, arg1, arg2, arg3)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance or integer_or_float

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer_or_float

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: integer_or_float

  :param arg3: autodoc from typemask/paramscheck
  :type arg3: integer_or_float

  ``typecheck mask: any_type, class_instance or integer_or_float, integer_or_float, integer_or_float, integer_or_float``

.. sq:attribute:: var E3DCOLOR.r

.. sq:attribute:: var E3DCOLOR.g

.. sq:attribute:: var E3DCOLOR.b

.. sq:attribute:: var E3DCOLOR.a

.. sq:attribute:: var E3DCOLOR.u





------------
class Color3
------------

.. sq:method:: Color3(arg0, arg1, arg2, arg3)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance or integer_or_float

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer_or_float

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: integer_or_float

  :param arg3: autodoc from typemask/paramscheck
  :type arg3: integer_or_float

  ``typecheck mask: any_type, class_instance or integer_or_float, integer_or_float, integer_or_float, integer_or_float``

.. sq:attribute:: var Color3.r

.. sq:attribute:: var Color3.g

.. sq:attribute:: var Color3.b

.. sq:function:: operator Color3._add(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: class_instance

  ``nparamscheck:2``

  ``typecheck mask: class_instance, class_instance``

.. sq:function:: operator Color3._sub(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: class_instance

  ``nparamscheck:2``

  ``typecheck mask: class_instance, class_instance``

.. sq:function:: operator Color3._mul(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: class_instance or integer_or_float

  ``nparamscheck:2``

  ``typecheck mask: class_instance, class_instance or integer_or_float``

.. sq:function:: method Color3.set(arg0, arg1, arg2)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: integer_or_float

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer_or_float

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: integer_or_float

  ``nparamscheck:3``

  ``typecheck mask: integer_or_float, integer_or_float, integer_or_float``





------------
class Color4
------------

.. sq:method:: Color4(arg0, arg1, arg2, arg3)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance or integer_or_float

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer_or_float

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: integer_or_float

  :param arg3: autodoc from typemask/paramscheck
  :type arg3: integer_or_float

  ``typecheck mask: any_type, class_instance or integer_or_float, integer_or_float, integer_or_float, integer_or_float``

.. sq:attribute:: var Color4.r

.. sq:attribute:: var Color4.g

.. sq:attribute:: var Color4.b

.. sq:attribute:: var Color4.a

.. sq:function:: operator Color4._add(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: class_instance

  ``nparamscheck:2``

  ``typecheck mask: class_instance, class_instance``

.. sq:function:: operator Color4._sub(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: class_instance

  ``nparamscheck:2``

  ``typecheck mask: class_instance, class_instance``

.. sq:function:: operator Color4._mul(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: class_instance or integer_or_float

  ``nparamscheck:2``

  ``typecheck mask: class_instance, class_instance or integer_or_float``

.. sq:function:: method Color4.set(arg0, arg1, arg2, arg3)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: integer_or_float

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer_or_float

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: integer_or_float

  :param arg3: autodoc from typemask/paramscheck
  :type arg3: integer_or_float

  ``nparamscheck:4``

  ``typecheck mask: integer_or_float, integer_or_float, integer_or_float, integer_or_float``





.. sq:function:: function matrix_to_euler(&tm)

  :param &tm:  
  :type &tm: TMatrix

  :return: integer

.. sq:function:: function euler_to_quat(&e)

  :param &e:  
  :type &e: integer

  :return: inline Quat

.. sq:function:: function dir_to_quat(&p)

  :param &p:  
  :type &p: integer

  :return: inline Quat

.. sq:function:: function quat_to_euler(&quat)

  :param &quat:  
  :type &quat: Quat

  :return: integer

.. sq:function:: function quat_to_matrix(&quat)

  :param &quat:  
  :type &quat: Quat

  :return: inline TMatrix

.. sq:function:: function quat_rotation_arc()

.. sq:function:: function qinterp()

.. sq:function:: function cvt()

.. sq:function:: function make_tm_quat()

.. sq:function:: function make_tm_axis()


