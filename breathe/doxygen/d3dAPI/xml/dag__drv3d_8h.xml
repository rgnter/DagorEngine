<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="dag__drv3d_8h" kind="file" language="C++">
    <compoundname>dag_drv3d.h</compoundname>
    <includes local="no">3d/dag_d3dResource.h</includes>
    <includes local="no">3d/dag_drvDecl.h</includes>
    <includes refid="dag__drv3d_consts_8h" local="no">3d/dag_drv3dConsts.h</includes>
    <includes refid="dag__tex3d_8h" local="no">3d/dag_tex3d.h</includes>
    <includes local="no">3d/dag_sampler.h</includes>
    <includes local="no">util/dag_globDef.h</includes>
    <includes local="no">vecmath/dag_vecMathDecl.h</includes>
    <includes local="no">3d/dag_renderStates.h</includes>
    <includes local="no">3d/dag_renderStateId.h</includes>
    <includes local="no">EASTL/initializer_list.h</includes>
    <includes local="no">3d/dag_hangHandler.h</includes>
    <includes local="yes">rayTrace/dag_drvRayTrace.h</includes>
    <includes local="yes">rayTrace/rayTracedrv3d.inl.h</includes>
    <includes local="no">3d/dag_drv3dCmd.h</includes>
    <includedby refid="dag__drv3d__buffers_8h" local="yes">/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d_buffers.h</includedby>
    <incdepgraph>
      <node id="14">
        <label>util/dag_stdint.h</label>
      </node>
      <node id="3">
        <label>3d/dag_drvDecl.h</label>
      </node>
      <node id="18">
        <label>vecmath/dag_vecMathDecl.h</label>
      </node>
      <node id="17">
        <label>util/dag_globDef.h</label>
      </node>
      <node id="5">
        <label>dag_drv3dDriverCode.h</label>
      </node>
      <node id="4">
        <label>3d/dag_drv3dConsts.h</label>
        <link refid="dag__drv3d_consts_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>EASTL/initializer_list.h</label>
      </node>
      <node id="10">
        <label>3d/dag_resId.h</label>
      </node>
      <node id="16">
        <label>3d/dag_sampler.h</label>
      </node>
      <node id="19">
        <label>3d/dag_renderStates.h</label>
      </node>
      <node id="20">
        <label>3d/dag_renderStateId.h</label>
      </node>
      <node id="23">
        <label>rayTrace/dag_drvRayTrace.h</label>
      </node>
      <node id="11">
        <label>3d/dag_texFlags.h</label>
      </node>
      <node id="2">
        <label>3d/dag_d3dResource.h</label>
      </node>
      <node id="15">
        <label>string.h</label>
      </node>
      <node id="24">
        <label>rayTrace/rayTracedrv3d.inl.h</label>
      </node>
      <node id="7">
        <label>3d/dag_3dConst_base.h</label>
      </node>
      <node id="8">
        <label>3d/dag_tex3d.h</label>
        <link refid="dag__tex3d_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h</label>
        <link refid="dag__drv3d_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>dag_drv3dShaderModelVersion.h</label>
      </node>
      <node id="22">
        <label>3d/dag_hangHandler.h</label>
      </node>
      <node id="25">
        <label>3d/dag_drv3dCmd.h</label>
      </node>
      <node id="13">
        <label>memory/dag_mem.h</label>
      </node>
      <node id="9">
        <label>dag_sampler.h</label>
      </node>
      <node id="12">
        <label>math/dag_color.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d_buffers.h</label>
        <link refid="dag__drv3d__buffers_8h"/>
      </node>
      <node id="1">
        <label>/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h</label>
        <link refid="dag__drv3d_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="class_driver3d_init_callback" prot="public">Driver3dInitCallback</innerclass>
    <innerclass refid="struct_driver3d_init_callback_1_1_version_range" prot="public">Driver3dInitCallback::VersionRange</innerclass>
    <innerclass refid="struct_driver3d_init_callback_1_1_render_size" prot="public">Driver3dInitCallback::RenderSize</innerclass>
    <innerclass refid="class_sbuffer" prot="public">Sbuffer</innerclass>
    <innerclass refid="struct_sbuffer_1_1_i_reload_data" prot="public">Sbuffer::IReloadData</innerclass>
    <innerclass refid="class_resource_barrier_desc" prot="public">ResourceBarrierDesc</innerclass>
    <innerclass refid="union_resource_clear_value" prot="public">ResourceClearValue</innerclass>
    <innerclass refid="struct_basic_resource_description" prot="public">BasicResourceDescription</innerclass>
    <innerclass refid="struct_buffer_resource_description" prot="public">BufferResourceDescription</innerclass>
    <innerclass refid="struct_basic_texture_resource_description" prot="public">BasicTextureResourceDescription</innerclass>
    <innerclass refid="struct_texture_resource_description" prot="public">TextureResourceDescription</innerclass>
    <innerclass refid="struct_vol_texture_resource_description" prot="public">VolTextureResourceDescription</innerclass>
    <innerclass refid="struct_array_texture_resource_description" prot="public">ArrayTextureResourceDescription</innerclass>
    <innerclass refid="struct_cube_texture_resource_description" prot="public">CubeTextureResourceDescription</innerclass>
    <innerclass refid="struct_array_cube_texture_resource_description" prot="public">ArrayCubeTextureResourceDescription</innerclass>
    <innerclass refid="struct_resource_description" prot="public">ResourceDescription</innerclass>
    <innerclass refid="classeastl_1_1hash_3_01_resource_description_01_4" prot="public">eastl::hash&lt; ResourceDescription &gt;</innerclass>
    <innerclass refid="struct_resource_heap_group_properties" prot="public">ResourceHeapGroupProperties</innerclass>
    <innerclass refid="struct_resource_allocation_properties" prot="public">ResourceAllocationProperties</innerclass>
    <innerclass refid="struct_render_target" prot="public">RenderTarget</innerclass>
    <innerclass refid="struct_render_pass_bind" prot="public">RenderPassBind</innerclass>
    <innerclass refid="struct_render_pass_target_desc" prot="public">RenderPassTargetDesc</innerclass>
    <innerclass refid="struct_render_pass_target" prot="public">RenderPassTarget</innerclass>
    <innerclass refid="struct_render_pass_desc" prot="public">RenderPassDesc</innerclass>
    <innerclass refid="struct_render_pass_area" prot="public">RenderPassArea</innerclass>
    <innerclass refid="struct_texture_tiling_info" prot="public">TextureTilingInfo</innerclass>
    <innerclass refid="struct_tile_mapping" prot="public">TileMapping</innerclass>
    <innernamespace refid="namespaceddsx">ddsx</innernamespace>
    <innernamespace refid="namespaceeastl">eastl</innernamespace>
    <innernamespace refid="namespaced3d">d3d</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="dag__drv3d_8h_1ab3a72a8644849607f5e3650a6364ad55" prot="public" static="no">
        <name>FIELD_MATCHES</name>
        <param><defname>field</defname></param>
        <initializer>(this-&gt;field == r.field)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" line="534" column="9"/>
      </memberdef>
      <memberdef kind="define" id="dag__drv3d_8h_1a319f8dea5209c36e04c9c7b3e7d0abaf" prot="public" static="no">
        <name>HALF_TEXEL_OFSF</name>
        <initializer>d3d::HALF_TEXEL_OFSFU</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" line="1651" column="9" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" bodystart="1651" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dag__drv3d_8h_1a89af2eb526af69b085f485ff2b45560b" prot="public" static="no">
        <name>D3D_HAS_QUADS</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" line="1658" column="10" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" bodystart="1658" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dag__drv3d_8h_1a93b1408ae2e66d0018e1b7672b89276e" prot="public" static="no">
        <name>d3derr</name>
        <param><defname>c</defname></param>
        <param><defname>m</defname></param>
        <initializer>  do                                                                   \
  {                                                                    \
    bool res = (c);                                                    \
    G_ANALYSIS_ASSUME(res);                                            \
    if (!res)                                                          \
    {                                                                  \
      bool canReset;                                                   \
      if (dagor_d3d_force_driver_reset || <ref refid="namespaced3d_1ab801ed189fe16e1552ffa91d625531ce" kindref="member">d3d::device_lost</ref>(&amp;canReset)) \
        d3derr_in_device_reset(m);                                     \
      else                                                             \
        DAG_FATAL(&quot;%s:\n%s&quot;, m, <ref refid="namespaced3d_1a1f0dd13f5310b20f32e045bb3cfe85f3" kindref="member">d3d::get_last_error</ref>());                \
    }                                                                  \
  } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" line="1670" column="9" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" bodystart="1670" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dag__drv3d_8h_1a1f48baed0a8a72030dcebb5b5101e434" prot="public" static="no">
        <name>d3d_err</name>
        <param><defname>c</defname></param>
        <initializer>d3derr((c), &quot;Driver3d error&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" line="1685" column="9" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" bodystart="1685" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="dag__drv3d_8h_1aba5fc2fabcfb5f2a44d199d6ba3c2b4e" prot="public" static="no" strong="yes">
        <type>unsigned</type>
        <name>ResourceActivationAction</name>
        <enumvalue id="dag__drv3d_8h_1aba5fc2fabcfb5f2a44d199d6ba3c2b4ea12558b5590fbf86eeaf1595f13555770" prot="public">
          <name>REWRITE_AS_COPY_DESTINATION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__drv3d_8h_1aba5fc2fabcfb5f2a44d199d6ba3c2b4eae87ac6e24c8a3bbc6815dc6302de00bf" prot="public">
          <name>REWRITE_AS_UAV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__drv3d_8h_1aba5fc2fabcfb5f2a44d199d6ba3c2b4ea0b231d542c5830363a9ae08011d63a96" prot="public">
          <name>REWRITE_AS_RTV_DSV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__drv3d_8h_1aba5fc2fabcfb5f2a44d199d6ba3c2b4eac4e7e9bc30c5bdc80204dfd9d4a4ede0" prot="public">
          <name>CLEAR_F_AS_UAV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__drv3d_8h_1aba5fc2fabcfb5f2a44d199d6ba3c2b4eacf564f4df92c20de3d4549ddf9dc7f64" prot="public">
          <name>CLEAR_I_AS_UAV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__drv3d_8h_1aba5fc2fabcfb5f2a44d199d6ba3c2b4ea5ec8c2bf649052e8013c4dae533d9d4e" prot="public">
          <name>CLEAR_AS_RTV_DSV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__drv3d_8h_1aba5fc2fabcfb5f2a44d199d6ba3c2b4ea93e01488d6c4fb04fdcbfd89807723bd" prot="public">
          <name>DISCARD_AS_UAV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__drv3d_8h_1aba5fc2fabcfb5f2a44d199d6ba3c2b4ea1e3dcb1b334addafafa130b9ce77c266" prot="public">
          <name>DISCARD_AS_RTV_DSV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" line="372" column="1" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" bodystart="373" bodyend="382"/>
      </memberdef>
      <memberdef kind="enum" id="dag__drv3d_8h_1a96de47a38fda09536e3a862b550d8c1d" prot="public" static="no" strong="yes">
        <type></type>
        <name>DepthAccess</name>
        <enumvalue id="dag__drv3d_8h_1a96de47a38fda09536e3a862b550d8c1da5c6dc3d436504b7a65191cafe28212ee" prot="public">
          <name>RW</name>
          <briefdescription>
<para>For regular depth attachement. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__drv3d_8h_1a96de47a38fda09536e3a862b550d8c1da5dd42e2c3b83a9658333215beadfef34" prot="public">
          <name>SampledRO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>For read-only depth attachement which can also be sampled as a texture in the same shader. IF YOU DON&apos;T NEED TO SAMPLE THE DEPTH, USE z_write=false WITH DepthAccess::RW INSTEAD. Using this state will cause HiZ decompression on some hardware and split of renderpass with flush of tile data into memory in a TBR. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" line="384" column="1" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" bodystart="385" bodyend="396"/>
      </memberdef>
      <memberdef kind="enum" id="dag__drv3d_8h_1a10c4580765b252a0590421a0e1e02154" prot="public" static="no" strong="no">
        <type></type>
        <name>ResourceHeapCreateFlag</name>
        <enumvalue id="dag__drv3d_8h_1a10c4580765b252a0590421a0e1e02154a3b52b0db90f6f3232ddfff48e581778a" prot="public">
          <name>RHCF_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__drv3d_8h_1a10c4580765b252a0590421a0e1e02154a1e0e082c1bebadea76c4be9e2c1e717d" prot="public">
          <name>RHCF_REQUIRES_DEDICATED_HEAP</name>
          <initializer>= 1u &lt;&lt; 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" line="658" column="1" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" bodystart="659" bodyend="671"/>
      </memberdef>
      <memberdef kind="enum" id="dag__drv3d_8h_1acb22209d14e9d2a2d45ed7f80c4f5d00" prot="public" static="no" strong="yes">
        <type></type>
        <name>APISupport</name>
        <enumvalue id="dag__drv3d_8h_1acb22209d14e9d2a2d45ed7f80c4f5d00a31e2893df9689fb3ec7b4aec04147dba" prot="public">
          <name>FULL_SUPPORT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__drv3d_8h_1acb22209d14e9d2a2d45ed7f80c4f5d00a99b9645e007f1600b6c8fcd6006d9930" prot="public">
          <name>OUTDATED_DRIVER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__drv3d_8h_1acb22209d14e9d2a2d45ed7f80c4f5d00aab395f22254f5a6204aa9ace0b1cf2f6" prot="public">
          <name>BLACKLISTED_DRIVER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__drv3d_8h_1acb22209d14e9d2a2d45ed7f80c4f5d00abc2e878c5c49cfffadeec85f4a0f8124" prot="public">
          <name>NO_DEVICE_FOUND</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" line="801" column="1" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" bodystart="802" bodyend="807"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="dag__drv3d_8h_1aa4d3019934cef603705255ec8e2d318d" prot="public" static="no">
        <type>TMatrix4</type>
        <definition>typedef TMatrix4 Matrix44</definition>
        <argsstring></argsstring>
        <name>Matrix44</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" line="31" column="18" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dag__drv3d_8h_1a9dc9a17a6115655f4a06d72858317417" prot="public" static="no">
        <type>intptr_t</type>
        <definition>typedef intptr_t main_wnd_f(void *, unsigned, uintptr_t, intptr_t)</definition>
        <argsstring>(void *, unsigned, uintptr_t, intptr_t)</argsstring>
        <name>main_wnd_f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" line="37" column="18" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dag__drv3d_8h_1a13e50441a92a606d6cfce6531a03cbef" prot="public" static="no">
        <type><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref></type>
        <definition>typedef Sbuffer Ibuffer</definition>
        <argsstring></argsstring>
        <name>Ibuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" line="184" column="17" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dag__drv3d_8h_1ac513f24daf7c0b66808c5b3681280fd9" prot="public" static="no">
        <type><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref></type>
        <definition>typedef Sbuffer Vbuffer</definition>
        <argsstring></argsstring>
        <name>Vbuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" line="185" column="17" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dag__drv3d_8h_1aa235e00b883f2888202630b9c47ab9ec" prot="public" static="no">
        <type>uint32_t</type>
        <definition>using ResourceHeapCreateFlags =  uint32_t</definition>
        <argsstring></argsstring>
        <name>ResourceHeapCreateFlags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" line="673" column="1" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" bodystart="673" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="dag__drv3d_8h_1a46b6ad6cc2bb500f23b945cb678aa8ff" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dagor_d3d_force_driver_reset</definition>
        <argsstring></argsstring>
        <name>dagor_d3d_force_driver_reset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" line="1668" column="13" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" declline="1668" declcolumn="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="dag__drv3d_8h_1a4325aaa29bb4a6bdeac1bdf0edd3a9cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="union_resource_clear_value" kindref="compound">ResourceClearValue</ref></type>
        <definition>ResourceClearValue make_clear_value</definition>
        <argsstring>(uint32_t r, uint32_t g, uint32_t b, uint32_t a)</argsstring>
        <name>make_clear_value</name>
        <param>
          <type>uint32_t</type>
          <declname>r</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>g</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>b</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" line="419" column="27" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" bodystart="419" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="dag__drv3d_8h_1ad97bd1d90b2cc32ba22ba33eff5caddc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="union_resource_clear_value" kindref="compound">ResourceClearValue</ref></type>
        <definition>ResourceClearValue make_clear_value</definition>
        <argsstring>(int32_t r, int32_t g, int32_t b, int32_t a)</argsstring>
        <name>make_clear_value</name>
        <param>
          <type>int32_t</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>g</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" line="429" column="27" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" bodystart="429" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="dag__drv3d_8h_1a930f4274cd980cff58a083610166eedb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="union_resource_clear_value" kindref="compound">ResourceClearValue</ref></type>
        <definition>ResourceClearValue make_clear_value</definition>
        <argsstring>(float r, float g, float b, float a)</argsstring>
        <name>make_clear_value</name>
        <param>
          <type>float</type>
          <declname>r</declname>
        </param>
        <param>
          <type>float</type>
          <declname>g</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" line="439" column="27" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" bodystart="439" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="dag__drv3d_8h_1aeb3163e270abe07d690ec0a7156a89c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="union_resource_clear_value" kindref="compound">ResourceClearValue</ref></type>
        <definition>ResourceClearValue make_clear_value</definition>
        <argsstring>(float d, uint8_t s)</argsstring>
        <name>make_clear_value</name>
        <param>
          <type>float</type>
          <declname>d</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" line="449" column="27" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" bodystart="449" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="dag__drv3d_8h_1a52956b67c6f2fe35377236ded568dfc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3derr_in_device_reset</definition>
        <argsstring>(const char *msg)</argsstring>
        <name>d3derr_in_device_reset</name>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" line="1667" column="5" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h" declline="1667" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Dagor<sp/>Engine<sp/>6.5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2023<sp/><sp/>Gaijin<sp/>Games<sp/>KFT.<sp/><sp/>All<sp/>rights<sp/>reserved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(for<sp/>conditions<sp/>of<sp/>use<sp/>see<sp/>prog/license.txt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;3d/dag_d3dResource.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;3d/dag_drvDecl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;3d/dag_drv3dConsts.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;3d/dag_tex3d.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;3d/dag_sampler.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;util/dag_globDef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vecmath/dag_vecMathDecl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;3d/dag_renderStates.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;3d/dag_renderStateId.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EASTL/initializer_list.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;3d/dag_hangHandler.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>forward<sp/>declarations<sp/>for<sp/>external<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TexImage32;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">IGenLoad;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">String;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DagorDateTime;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">D3dInterfaceTable;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">ddsx</highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Header;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>TMatrix4<sp/>Matrix44;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//---<sp/>Driver3dDesc<sp/>&amp;<sp/>initialization<sp/>-------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;rayTrace/dag_drvRayTrace.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>main<sp/>window<sp/>proc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>intptr_t<sp/>main_wnd_f(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">,<sp/>uintptr_t,<sp/>intptr_t);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="class_driver3d_init_callback" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_driver3d_init_callback" kindref="compound">Driver3dInitCallback</ref></highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="42" refid="struct_driver3d_init_callback_1_1_version_range" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_driver3d_init_callback_1_1_version_range" kindref="compound">VersionRange</ref></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>minVersion;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>maxVersion;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="struct_driver3d_init_callback_1_1_render_size" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_driver3d_init_callback_1_1_render_size" kindref="compound">RenderSize</ref></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>NeedStereoRenderFunc<sp/>=<sp/>bool<sp/>(*)();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>StereoRenderDimensionFunc<sp/>=<sp/>int<sp/>(*)();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>StereoRenderExtensionsFunc<sp/>=<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*(*)();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>StereoRenderVersionsFunc<sp/>=<sp/><ref refid="struct_driver3d_init_callback_1_1_version_range" kindref="compound">VersionRange</ref><sp/>(*)();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>StereoRenderAdapterFunc<sp/>=<sp/>int64_t<sp/>(*)();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>verifyResolutionSettings(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;ref_scr_wdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;ref_scr_hgt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>base_scr_wdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>base_scr_hgt,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>window_mode)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="61"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>G_UNUSED(ref_scr_wdt);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>G_UNUSED(ref_scr_hgt);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>G_UNUSED(base_scr_wdt);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>G_UNUSED(base_scr_hgt);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>G_UNUSED(window_mode);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>returns<sp/>non-0<sp/>if<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>validateDesc(<ref refid="struct_driver3d_desc" kindref="compound">Driver3dDesc</ref><sp/>&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>returns<sp/>-1<sp/>if<sp/>A<sp/>is<sp/>better,<sp/>+1<sp/>if<sp/>B<sp/>is<sp/>better,<sp/>and<sp/>0<sp/>if<sp/>equivalent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compareDesc(<ref refid="struct_driver3d_desc" kindref="compound">Driver3dDesc</ref><sp/>&amp;A,<sp/><ref refid="struct_driver3d_desc" kindref="compound">Driver3dDesc</ref><sp/>&amp;B)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Stereo<sp/>render<sp/>related<sp/>queries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>desiredStereoRender()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>int64_t<sp/>desiredAdapter()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>RenderSize<sp/>desiredRendererSize()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{0,<sp/>0};<sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*desiredRendererDeviceExtensions()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*desiredRendererInstanceExtensions()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>VersionRange<sp/>desiredRendererVersionRange()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{0,<sp/>0};<sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal">};</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//---<sp/>Vertex<sp/>&amp;<sp/>index<sp/>buffer<sp/>interface<sp/>-------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="class_sbuffer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>D3dResource</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>DAG_DECLARE_NEW(midmem)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="struct_sbuffer_1_1_i_reload_data" refkind="compound"><highlight class="normal"><sp/><sp/>struct<sp/><ref refid="struct_sbuffer_1_1_i_reload_data" kindref="compound">IReloadData</ref></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="struct_sbuffer_1_1_i_reload_data" kindref="compound">IReloadData</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reloadD3dRes(<ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*sb)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>destroySelf()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>setReloadCallback(<ref refid="struct_sbuffer_1_1_i_reload_data" kindref="compound">IReloadData</ref><sp/>*)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>restype()<sp/>const<sp/>override<sp/>final<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES3D_SBUF;<sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>lock<sp/>buffer;<sp/>returns<sp/>0<sp/>on<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>size_bytes==0<sp/>means<sp/>entire<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lock(uint32_t<sp/>ofs_bytes,<sp/>uint32_t<sp/>size_bytes,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unlock()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getFlags()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*getBufName()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getResName();<sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>structured<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getElementSize()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getNumElements()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>};</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copyTo(<ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*<sp/></highlight><highlight class="comment">/*dest*/</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}<sp/></highlight><highlight class="comment">//<sp/>return<sp/>true,<sp/>if<sp/>copied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copyTo(<ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*<sp/></highlight><highlight class="comment">/*dest*/</highlight><highlight class="normal">,<sp/>uint32_t<sp/></highlight><highlight class="comment">/*dst_ofs_bytes*/</highlight><highlight class="normal">,<sp/>uint32_t<sp/></highlight><highlight class="comment">/*src_ofs_bytes*/</highlight><highlight class="normal">,<sp/>uint32_t<sp/></highlight><highlight class="comment">/*size_bytes*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lockEx(uint32_t<sp/>ofs_bytes,<sp/>uint32_t<sp/>size_bytes,<sp/>T<sp/>**p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*vp;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lock(ofs_bytes,<sp/>size_bytes,<sp/>&amp;vp,<sp/>flags))</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*p<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>*p<sp/>=<sp/>(T<sp/>*)vp;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkLockParams(uint32_t<sp/>offset,<sp/>uint32_t<sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bufFlags)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>G_UNUSED(offset);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>G_UNUSED(size);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>G_UNUSED(flags);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((bufFlags<sp/>&amp;<sp/>SBCF_FRAMEMEM)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>somewhat<sp/>arbitrary<sp/>but<sp/>we<sp/>don&apos;t<sp/>want<sp/>to<sp/>upload<sp/>too<sp/>much<sp/>data<sp/>each<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>max_dynamic_buffer_size<sp/>=<sp/>256<sp/>&lt;&lt;<sp/>10;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>G_UNUSED(max_dynamic_buffer_size);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(offset<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(size<sp/>&lt;=<sp/>max_dynamic_buffer_size);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(bufFlags<sp/>&amp;<sp/>SBCF_DYNAMIC);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT((bufFlags<sp/>&amp;<sp/>SBCF_BIND_UNORDERED)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(flags<sp/>&amp;<sp/>VBLOCK_DISCARD);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT((flags<sp/>&amp;<sp/>(VBLOCK_READONLY<sp/>|<sp/>VBLOCK_NOOVERWRITE))<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>updateDataWithLock(uint32_t<sp/>ofs_bytes,<sp/>uint32_t<sp/>size_bytes,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*__restrict<sp/>src,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lockFlags)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT_RETURN(size_bytes,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lock(ofs_bytes,<sp/>size_bytes,<sp/>&amp;data,<sp/>lockFlags<sp/>|<sp/>VBLOCK_WRITEONLY))</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(data,<sp/>src,<sp/>size_bytes);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unlock();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>updateData(uint32_t<sp/>ofs_bytes,<sp/>uint32_t<sp/>size_bytes,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*__restrict<sp/>src,<sp/>uint32_t<sp/>lockFlags)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT_RETURN(size_bytes,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>updateDataWithLock(ofs_bytes,<sp/>size_bytes,<sp/>src,<sp/>lockFlags);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lock(uint32_t<sp/>ofs_bytes,<sp/>uint32_t<sp/>size_bytes,<sp/>uint16_t<sp/>**p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(!(getFlags()<sp/>&amp;<sp/>SBCF_INDEX32));</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lockEx(ofs_bytes,<sp/>size_bytes,<sp/>p,<sp/>flags);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lock32(uint32_t<sp/>ofs_bytes,<sp/>uint32_t<sp/>size_bytes,<sp/>uint32_t<sp/>**p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT((getFlags()<sp/>&amp;<sp/>SBCF_INDEX32));</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lockEx(ofs_bytes,<sp/>size_bytes,<sp/>p,<sp/>flags);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>~<ref refid="class_sbuffer" kindref="compound">Sbuffer</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="182"><highlight class="normal">};</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/><ref refid="class_sbuffer" kindref="compound">Ibuffer</ref>;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/><ref refid="class_sbuffer" kindref="compound">Vbuffer</ref>;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>input<sp/>type<sp/>for<sp/>&apos;d3d::resource_barrier&apos;<sp/>allows<sp/>one<sp/>function<sp/>to<sp/>handle<sp/>multiple<sp/>input<sp/>data<sp/>layouts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inputs<sp/>can<sp/>be<sp/>simple<sp/>single<sp/>values,<sp/>arrays<sp/>of<sp/>values,<sp/>pointers<sp/>to<sp/>values<sp/>and<sp/>initializer<sp/>lists<sp/>of<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>interpret<sp/>the<sp/>stored<sp/>values<sp/>use<sp/>the<sp/>provided<sp/>enumerate<sp/>functions<sp/>to<sp/>get<sp/>the<sp/>buffer<sp/>and<sp/>texture<sp/>barriers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>more<sp/>details<sp/>on<sp/>resource<sp/>barriers<sp/>see<sp/>https://info.gaijin.lan/display/DE4/Resource+and+Execution+Barriers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="class_resource_barrier_desc" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_resource_barrier_desc" kindref="compound">ResourceBarrierDesc</ref></highlight></codeline>
<codeline lineno="192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>special<sp/>count<sp/>value<sp/>to<sp/>distinguish<sp/>array<sp/>of<sp/>values<sp/>from<sp/>single<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>single_element_count<sp/>=<sp/>~0u;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*buffer;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*buffers;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*texture;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*textures;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>ResourceBarrier<sp/>bufferState;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ResourceBarrier<sp/>*bufferStates;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>ResourceBarrier<sp/>textureState;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ResourceBarrier<sp/>*textureStates;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>textureSubResIndex;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>*textureSubResIndices;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>textureSubResRange;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>*textureSubResRanges;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bufferCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>textureCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><ref refid="class_resource_barrier_desc" kindref="compound">ResourceBarrierDesc</ref>()<sp/>:</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>texture{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>bufferStates{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>textureStates{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>textureSubResIndices{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>textureSubResRanges{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><ref refid="class_resource_barrier_desc" kindref="compound">ResourceBarrierDesc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_resource_barrier_desc" kindref="compound">ResourceBarrierDesc</ref><sp/>&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><ref refid="class_resource_barrier_desc" kindref="compound">ResourceBarrierDesc</ref>(<ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*buf,<sp/>ResourceBarrier<sp/>rb)<sp/>:<sp/>buffer{buf},<sp/>bufferState{rb},<sp/>bufferCount{single_element_count}<sp/>{}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><ref refid="class_resource_barrier_desc" kindref="compound">ResourceBarrierDesc</ref>(<ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*bufs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ResourceBarrier<sp/>*rb,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>count)<sp/>:</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>buffers{bufs},<sp/>bufferStates{rb},<sp/>bufferCount{count}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><ref refid="class_resource_barrier_desc" kindref="compound">ResourceBarrierDesc</ref>(<ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*(&amp;bufs)[N],<sp/>ResourceBarrier<sp/>(&amp;rb)[N])<sp/>:<sp/>buffers{bufs},<sp/>bufferStates{rb},<sp/>bufferCount{N}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><ref refid="class_resource_barrier_desc" kindref="compound">ResourceBarrierDesc</ref>(std::initializer_list&lt;Sbuffer<sp/>*&gt;<sp/>bufs,<sp/>std::initializer_list&lt;ResourceBarrier&gt;<sp/>rb)<sp/>:</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>buffers{bufs.begin()},<sp/>bufferStates{rb.begin()},<sp/>bufferCount{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(bufs.size())}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(bufs.size()<sp/>==<sp/>rb.size());</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><ref refid="class_resource_barrier_desc" kindref="compound">ResourceBarrierDesc</ref>(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex,<sp/>ResourceBarrier<sp/>rb,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>sub_res_index,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>sub_res_range)<sp/>:</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>texture{tex},</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>textureState{rb},</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>textureSubResIndex{sub_res_index},</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>textureSubResRange{sub_res_range},</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>textureCount{single_element_count}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><ref refid="class_resource_barrier_desc" kindref="compound">ResourceBarrierDesc</ref>(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*texs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ResourceBarrier<sp/>*rb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>*sub_res_index,</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>*sub_res_range,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>count)<sp/>:</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>textures{texs},<sp/>textureStates{rb},<sp/>textureSubResIndices{sub_res_index},<sp/>textureSubResRanges{sub_res_range},<sp/>textureCount{count}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><ref refid="class_resource_barrier_desc" kindref="compound">ResourceBarrierDesc</ref>(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*(&amp;texs)[N],<sp/>ResourceBarrier<sp/>(&amp;rb)[N],<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>(&amp;sub_res_index)[N],<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>(&amp;sub_res_range)[N])<sp/>:</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>textures{texs},<sp/>textureStates{rb},<sp/>textureSubResIndices{sub_res_index},<sp/>textureSubResRanges{sub_res_range},<sp/>textureCount{N}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><ref refid="class_resource_barrier_desc" kindref="compound">ResourceBarrierDesc</ref>(std::initializer_list&lt;BaseTexture<sp/>*&gt;<sp/>texs,<sp/>std::initializer_list&lt;ResourceBarrier&gt;<sp/>rb,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>std::initializer_list&lt;unsigned&gt;<sp/>sub_res_index,<sp/>std::initializer_list&lt;unsigned&gt;<sp/>sub_res_range)<sp/>:</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>textures{texs.begin()},</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>textureStates{rb.begin()},</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>textureSubResIndices{sub_res_index.begin()},</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>textureSubResRanges{sub_res_range.begin()},</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>textureCount{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(texs.size())}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(texs.size()<sp/>==<sp/>rb.size());</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(texs.size()<sp/>==<sp/>sub_res_index.size());</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(texs.size()<sp/>==<sp/>sub_res_range.size());</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><ref refid="class_resource_barrier_desc" kindref="compound">ResourceBarrierDesc</ref>(<ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*bufs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ResourceBarrier<sp/>*b_rb,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>b_count,<sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*texs,</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ResourceBarrier<sp/>*t_rb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>*t_sub_res_index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>*t_sub_res_range,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>t_count)<sp/>:</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>buffers{bufs},</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>bufferStates{b_rb},</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>bufferCount{b_count},</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>textures{texs},</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>textureStates{t_rb},</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>textureSubResIndices{t_sub_res_index},</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>textureSubResRanges{t_sub_res_range},</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>textureCount{t_count}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><ref refid="class_resource_barrier_desc" kindref="compound">ResourceBarrierDesc</ref>(<ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*buf,<sp/>ResourceBarrier<sp/>b_rb,<sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*texs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ResourceBarrier<sp/>*t_rb,</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>*t_sub_res_index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>*t_sub_res_range,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>t_count)<sp/>:</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer{buf},</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>bufferState{b_rb},</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>bufferCount{single_element_count},</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>textures{texs},</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>textureStates{t_rb},</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>textureSubResIndices{t_sub_res_index},</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>textureSubResRanges{t_sub_res_range},</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>textureCount{t_count}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><ref refid="class_resource_barrier_desc" kindref="compound">ResourceBarrierDesc</ref>(<ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*bufs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ResourceBarrier<sp/>*b_rb,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>b_count,<sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex,<sp/>ResourceBarrier<sp/>t_rb,</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>t_sub_res_index,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>t_sub_res_range)<sp/>:</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>buffers{bufs},</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>bufferStates{b_rb},</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>bufferCount{b_count},</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>texture{tex},</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>textureState{t_rb},</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>textureSubResIndex{t_sub_res_index},</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>textureSubResRange{t_sub_res_range},</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>textureCount{single_element_count}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><ref refid="class_resource_barrier_desc" kindref="compound">ResourceBarrierDesc</ref>(<ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*buf,<sp/>ResourceBarrier<sp/>b_rb,<sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex,<sp/>ResourceBarrier<sp/>t_rb,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>t_sub_res_index,</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>t_sub_res_range)<sp/>:</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer{buf},</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>bufferState{b_rb},</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>bufferCount{single_element_count},</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>texture{tex},</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>textureState{t_rb},</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>textureSubResIndex{t_sub_res_index},</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>textureSubResRange{t_sub_res_range},</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>textureCount{single_element_count}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><ref refid="class_resource_barrier_desc" kindref="compound">ResourceBarrierDesc</ref>(std::initializer_list&lt;Sbuffer<sp/>*&gt;<sp/>bufs,<sp/>std::initializer_list&lt;ResourceBarrier&gt;<sp/>buf_rb,</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>std::initializer_list&lt;BaseTexture<sp/>*&gt;<sp/>texs,<sp/>std::initializer_list&lt;ResourceBarrier&gt;<sp/>tex_rb,</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>std::initializer_list&lt;unsigned&gt;<sp/>sub_res_index,<sp/>std::initializer_list&lt;unsigned&gt;<sp/>sub_res_range)<sp/>:</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>buffers{bufs.begin()},</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>bufferStates{buf_rb.begin()},</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>bufferCount{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(bufs.size())},</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>textures{texs.begin()},</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>textureStates{tex_rb.begin()},</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>textureSubResIndices{sub_res_index.begin()},</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>textureSubResRanges{sub_res_range.begin()},</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>textureCount{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(texs.size())}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(bufs.size()<sp/>==<sp/>buf_rb.size());</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(texs.size()<sp/>==<sp/>tex_rb.size());</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(texs.size()<sp/>==<sp/>sub_res_index.size());</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(texs.size()<sp/>==<sp/>sub_res_range.size());</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Expected<sp/>use<sp/>case<sp/>is<sp/>that<sp/>&apos;rb&apos;<sp/>has<sp/>the<sp/>RB_FLUSH_UAV<sp/>flag<sp/>set<sp/>for<sp/>all<sp/>pending<sp/>uav<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="class_resource_barrier_desc" kindref="compound">ResourceBarrierDesc</ref>(ResourceBarrier<sp/>rb)<sp/>:<sp/>buffer{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">},<sp/>bufferState{rb},<sp/>bufferCount{single_element_count}<sp/>{}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>enumerateBufferBarriers(T<sp/>clb)</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(single_element_count<sp/>==<sp/>bufferCount)</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clb(buffer,<sp/>bufferState);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bufferCount;<sp/>++i)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clb(buffers[i],<sp/>bufferStates[i]);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>enumerateTextureBarriers(T<sp/>clb)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(single_element_count<sp/>==<sp/>textureCount)</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clb(texture,<sp/>textureState,<sp/>textureSubResIndex,<sp/>textureSubResRange);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>textureCount;<sp/>++i)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clb(textures[i],<sp/>textureStates[i],<sp/>textureSubResIndices[i],<sp/>textureSubResRanges[i]);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal">};</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>ResourceActivationAction<sp/>:<sp/>unsigned</highlight></codeline>
<codeline lineno="373"><highlight class="normal">{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>REWRITE_AS_COPY_DESTINATION,</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>REWRITE_AS_UAV,</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>REWRITE_AS_RTV_DSV,</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>CLEAR_F_AS_UAV,</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>CLEAR_I_AS_UAV,</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>CLEAR_AS_RTV_DSV,</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>DISCARD_AS_UAV,</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>DISCARD_AS_RTV_DSV,</highlight></codeline>
<codeline lineno="382"><highlight class="normal">};</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>DepthAccess</highlight></codeline>
<codeline lineno="385"><highlight class="normal">{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>RW,</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>SampledRO</highlight></codeline>
<codeline lineno="396"><highlight class="normal">};</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398" refid="union_resource_clear_value" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="union_resource_clear_value" kindref="compound">ResourceClearValue</ref></highlight></codeline>
<codeline lineno="399"><highlight class="normal">{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>asUint[4];</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>asInt[4];</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>asFloat[4];</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>asDepth;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>asStencil;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="417"><highlight class="normal">};</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="union_resource_clear_value" kindref="compound">ResourceClearValue</ref><sp/>make_clear_value(uint32_t<sp/>r,<sp/>uint32_t<sp/>g,<sp/>uint32_t<sp/>b,<sp/>uint32_t<sp/>a)</highlight></codeline>
<codeline lineno="420"><highlight class="normal">{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><ref refid="union_resource_clear_value" kindref="compound">ResourceClearValue</ref><sp/>result;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>result.asUint[0]<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>result.asUint[1]<sp/>=<sp/>g;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>result.asUint[2]<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>result.asUint[3]<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="union_resource_clear_value" kindref="compound">ResourceClearValue</ref><sp/>make_clear_value(int32_t<sp/>r,<sp/>int32_t<sp/>g,<sp/>int32_t<sp/>b,<sp/>int32_t<sp/>a)</highlight></codeline>
<codeline lineno="430"><highlight class="normal">{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><ref refid="union_resource_clear_value" kindref="compound">ResourceClearValue</ref><sp/>result;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>result.asInt[0]<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>result.asInt[1]<sp/>=<sp/>g;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>result.asInt[2]<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>result.asInt[3]<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="union_resource_clear_value" kindref="compound">ResourceClearValue</ref><sp/>make_clear_value(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>r,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>g,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="440"><highlight class="normal">{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><ref refid="union_resource_clear_value" kindref="compound">ResourceClearValue</ref><sp/>result;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>result.asFloat[0]<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>result.asFloat[1]<sp/>=<sp/>g;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>result.asFloat[2]<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>result.asFloat[3]<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="union_resource_clear_value" kindref="compound">ResourceClearValue</ref><sp/>make_clear_value(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>d,<sp/>uint8_t<sp/>s)</highlight></codeline>
<codeline lineno="450"><highlight class="normal">{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><ref refid="union_resource_clear_value" kindref="compound">ResourceClearValue</ref><sp/>result;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>result.asDepth<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>result.asStencil<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457" refid="struct_basic_resource_description" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_basic_resource_description" kindref="compound">BasicResourceDescription</ref></highlight></codeline>
<codeline lineno="458"><highlight class="normal">{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>uint32_t<sp/>cFlags;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>ResourceActivationAction<sp/>activation;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><ref refid="union_resource_clear_value" kindref="compound">ResourceClearValue</ref><sp/>clearValue;</highlight></codeline>
<codeline lineno="462"><highlight class="normal">};</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464" refid="struct_buffer_resource_description" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_buffer_resource_description" kindref="compound">BufferResourceDescription</ref><sp/>:<sp/><ref refid="struct_basic_resource_description" kindref="compound">BasicResourceDescription</ref></highlight></codeline>
<codeline lineno="465"><highlight class="normal">{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>uint32_t<sp/>elementSizeInBytes;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>uint32_t<sp/>elementCount;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>uint32_t<sp/>viewFormat;</highlight></codeline>
<codeline lineno="469"><highlight class="normal">};</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471" refid="struct_basic_texture_resource_description" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_basic_texture_resource_description" kindref="compound">BasicTextureResourceDescription</ref><sp/>:<sp/><ref refid="struct_basic_resource_description" kindref="compound">BasicResourceDescription</ref></highlight></codeline>
<codeline lineno="472"><highlight class="normal">{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>uint32_t<sp/>mipLevels;</highlight></codeline>
<codeline lineno="474"><highlight class="normal">};</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476" refid="struct_texture_resource_description" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_texture_resource_description" kindref="compound">TextureResourceDescription</ref><sp/>:<sp/><ref refid="struct_basic_texture_resource_description" kindref="compound">BasicTextureResourceDescription</ref></highlight></codeline>
<codeline lineno="477"><highlight class="normal">{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>uint32_t<sp/>width;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>uint32_t<sp/>height;</highlight></codeline>
<codeline lineno="480"><highlight class="normal">};</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482" refid="struct_vol_texture_resource_description" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_vol_texture_resource_description" kindref="compound">VolTextureResourceDescription</ref><sp/>:<sp/><ref refid="struct_texture_resource_description" kindref="compound">TextureResourceDescription</ref></highlight></codeline>
<codeline lineno="483"><highlight class="normal">{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>uint32_t<sp/>depth;</highlight></codeline>
<codeline lineno="485"><highlight class="normal">};</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487" refid="struct_array_texture_resource_description" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_array_texture_resource_description" kindref="compound">ArrayTextureResourceDescription</ref><sp/>:<sp/><ref refid="struct_texture_resource_description" kindref="compound">TextureResourceDescription</ref></highlight></codeline>
<codeline lineno="488"><highlight class="normal">{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>uint32_t<sp/>arrayLayers;</highlight></codeline>
<codeline lineno="490"><highlight class="normal">};</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492" refid="struct_cube_texture_resource_description" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_cube_texture_resource_description" kindref="compound">CubeTextureResourceDescription</ref><sp/>:<sp/><ref refid="struct_basic_texture_resource_description" kindref="compound">BasicTextureResourceDescription</ref></highlight></codeline>
<codeline lineno="493"><highlight class="normal">{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>uint32_t<sp/>extent;</highlight></codeline>
<codeline lineno="495"><highlight class="normal">};</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497" refid="struct_array_cube_texture_resource_description" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_array_cube_texture_resource_description" kindref="compound">ArrayCubeTextureResourceDescription</ref><sp/>:<sp/><ref refid="struct_cube_texture_resource_description" kindref="compound">CubeTextureResourceDescription</ref></highlight></codeline>
<codeline lineno="498"><highlight class="normal">{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>uint32_t<sp/>cubes;</highlight></codeline>
<codeline lineno="500"><highlight class="normal">};</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502" refid="struct_resource_description" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_resource_description" kindref="compound">ResourceDescription</ref></highlight></codeline>
<codeline lineno="503"><highlight class="normal">{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>uint32_t<sp/>resType;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_basic_resource_description" kindref="compound">BasicResourceDescription</ref><sp/>asBasicRes;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_buffer_resource_description" kindref="compound">BufferResourceDescription</ref><sp/>asBufferRes;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_basic_texture_resource_description" kindref="compound">BasicTextureResourceDescription</ref><sp/>asBasicTexRes;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_texture_resource_description" kindref="compound">TextureResourceDescription</ref><sp/>asTexRes;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vol_texture_resource_description" kindref="compound">VolTextureResourceDescription</ref><sp/>asVolTexRes;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_array_texture_resource_description" kindref="compound">ArrayTextureResourceDescription</ref><sp/>asArrayTexRes;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_cube_texture_resource_description" kindref="compound">CubeTextureResourceDescription</ref><sp/>asCubeTexRes;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_array_cube_texture_resource_description" kindref="compound">ArrayCubeTextureResourceDescription</ref><sp/>asArrayCubeTexRes;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><ref refid="struct_resource_description" kindref="compound">ResourceDescription</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><ref refid="struct_resource_description" kindref="compound">ResourceDescription</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_resource_description" kindref="compound">ResourceDescription</ref><sp/>&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><ref refid="struct_resource_description" kindref="compound">ResourceDescription</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_buffer_resource_description" kindref="compound">BufferResourceDescription</ref><sp/>&amp;buf)<sp/>:<sp/>resType{RES3D_SBUF},<sp/>asBufferRes{buf}<sp/>{}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><ref refid="struct_resource_description" kindref="compound">ResourceDescription</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_texture_resource_description" kindref="compound">TextureResourceDescription</ref><sp/>&amp;tex)<sp/>:<sp/>resType{RES3D_TEX},<sp/>asTexRes{tex}<sp/>{}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><ref refid="struct_resource_description" kindref="compound">ResourceDescription</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vol_texture_resource_description" kindref="compound">VolTextureResourceDescription</ref><sp/>&amp;tex)<sp/>:<sp/>resType{RES3D_VOLTEX},<sp/>asVolTexRes{tex}<sp/>{}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><ref refid="struct_resource_description" kindref="compound">ResourceDescription</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_array_texture_resource_description" kindref="compound">ArrayTextureResourceDescription</ref><sp/>&amp;tex)<sp/>:<sp/>resType{RES3D_ARRTEX},<sp/>asArrayTexRes{tex}<sp/>{}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><ref refid="struct_resource_description" kindref="compound">ResourceDescription</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_cube_texture_resource_description" kindref="compound">CubeTextureResourceDescription</ref><sp/>&amp;tex)<sp/>:<sp/>resType{RES3D_CUBETEX},<sp/>asCubeTexRes{tex}<sp/>{}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><ref refid="struct_resource_description" kindref="compound">ResourceDescription</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_array_cube_texture_resource_description" kindref="compound">ArrayCubeTextureResourceDescription</ref><sp/>&amp;tex)<sp/>:<sp/>resType{RES3D_CUBEARRTEX},<sp/>asArrayCubeTexRes{tex}<sp/>{}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_resource_description" kindref="compound">ResourceDescription</ref><sp/>&amp;r)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="533"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FIELD_MATCHES(field)<sp/>(this-&gt;field<sp/>==<sp/>r.field)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!FIELD_MATCHES(resType)<sp/>||<sp/>!FIELD_MATCHES(asBasicRes.cFlags))</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resType<sp/>==<sp/>RES3D_SBUF)</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FIELD_MATCHES(asBufferRes.elementCount)<sp/>&amp;&amp;<sp/>FIELD_MATCHES(asBufferRes.elementSizeInBytes)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FIELD_MATCHES(asBufferRes.viewFormat);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!FIELD_MATCHES(asBasicTexRes.mipLevels))</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resType<sp/>==<sp/>RES3D_CUBETEX<sp/>||<sp/>resType<sp/>==<sp/>RES3D_CUBEARRTEX)</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!FIELD_MATCHES(asCubeTexRes.extent))</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resType<sp/>==<sp/>RES3D_CUBEARRTEX)</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FIELD_MATCHES(asArrayCubeTexRes.cubes);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!FIELD_MATCHES(asTexRes.width)<sp/>||<sp/>!FIELD_MATCHES(asTexRes.height))</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resType<sp/>==<sp/>RES3D_VOLTEX)</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FIELD_MATCHES(asVolTexRes.depth);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resType<sp/>==<sp/>RES3D_ARRTEX)</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FIELD_MATCHES(asArrayTexRes.arrayLayers);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>FIELD_MATCHES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>HashT<sp/>=<sp/>size_t;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>HashT<sp/>hash()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="561"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>HashT<sp/>hashValue<sp/>=<sp/>resType;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(resType)</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RES3D_SBUF:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hashPack(hashValue,<sp/>asBufferRes.elementCount,<sp/>asBufferRes.elementSizeInBytes,<sp/>asBufferRes.viewFormat);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RES3D_TEX:</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hashPack(hashValue,<sp/>eastl::to_underlying(asTexRes.activation),<sp/>asTexRes.cFlags,<sp/>asTexRes.mipLevels,<sp/>asTexRes.height,</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asTexRes.width,<sp/>asTexRes.clearValue.asUint[0],<sp/>asTexRes.clearValue.asUint[1],<sp/>asTexRes.clearValue.asUint[2],</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asTexRes.clearValue.asUint[3]);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RES3D_VOLTEX:</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hashPack(hashValue,<sp/>eastl::to_underlying(asVolTexRes.activation),<sp/>asVolTexRes.cFlags,<sp/>asVolTexRes.mipLevels,</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asVolTexRes.height,<sp/>asVolTexRes.width,<sp/>asVolTexRes.depth,<sp/>asVolTexRes.clearValue.asUint[0],<sp/>asVolTexRes.clearValue.asUint[1],</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asVolTexRes.clearValue.asUint[2],<sp/>asVolTexRes.clearValue.asUint[3]);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RES3D_ARRTEX:</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hashPack(hashValue,<sp/>eastl::to_underlying(asArrayTexRes.activation),<sp/>asArrayTexRes.arrayLayers,<sp/>asArrayTexRes.cFlags,</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asArrayTexRes.height,<sp/>asArrayTexRes.mipLevels,<sp/>asArrayTexRes.height,<sp/>asArrayTexRes.width,<sp/>asArrayTexRes.clearValue.asUint[0],</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asArrayTexRes.clearValue.asUint[1],<sp/>asArrayTexRes.clearValue.asUint[2],<sp/>asArrayTexRes.clearValue.asUint[3]);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RES3D_CUBETEX:</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hashPack(hashValue,<sp/>eastl::to_underlying(asCubeTexRes.activation),<sp/>asCubeTexRes.cFlags,<sp/>asCubeTexRes.extent,</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asCubeTexRes.mipLevels,<sp/>asCubeTexRes.clearValue.asUint[0],<sp/>asCubeTexRes.clearValue.asUint[1],</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asCubeTexRes.clearValue.asUint[2],<sp/>asCubeTexRes.clearValue.asUint[3]);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RES3D_CUBEARRTEX:</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hashPack(hashValue,<sp/>eastl::to_underlying(asArrayCubeTexRes.activation),<sp/>asArrayCubeTexRes.cFlags,</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asArrayCubeTexRes.mipLevels,<sp/>asArrayCubeTexRes.cubes,<sp/>asArrayCubeTexRes.extent,<sp/>asArrayCubeTexRes.clearValue.asUint[0],</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asArrayCubeTexRes.clearValue.asUint[1],<sp/>asArrayCubeTexRes.clearValue.asUint[2],<sp/>asArrayCubeTexRes.clearValue.asUint[3]);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hashValue;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>HashT<sp/>hashPack()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>HashT<sp/>hashPack(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;first,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ts<sp/>&amp;...other)</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>HashT<sp/>hashVal<sp/>=<sp/>hashPack(other...);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>hashVal<sp/>^=<sp/>first<sp/>+<sp/>0x9e3779b9<sp/>+<sp/>(hashVal<sp/>&lt;&lt;<sp/>6)<sp/>+<sp/>(hashVal<sp/>&gt;&gt;<sp/>2);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hashVal;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal">};</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">eastl</highlight></codeline>
<codeline lineno="602"><highlight class="normal">{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="604" refid="classeastl_1_1hash_3_01_resource_description_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">hash&lt;<ref refid="struct_resource_description" kindref="compound">ResourceDescription</ref>&gt;</highlight></codeline>
<codeline lineno="605"><highlight class="normal">{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_resource_description" kindref="compound">ResourceDescription</ref><sp/>&amp;desc)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>desc.hash();<sp/>}</highlight></codeline>
<codeline lineno="608"><highlight class="normal">};</highlight></codeline>
<codeline lineno="609"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>eastl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResourceHeapGroup;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613" refid="struct_resource_heap_group_properties" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_resource_heap_group_properties" kindref="compound">ResourceHeapGroupProperties</ref></highlight></codeline>
<codeline lineno="614"><highlight class="normal">{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>flags;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>true,<sp/>the<sp/>CPU<sp/>can<sp/>access<sp/>this<sp/>memory<sp/>directly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>consoles<sp/>this<sp/>is<sp/>usually<sp/>true<sp/>for<sp/>all<sp/>heap<sp/>groups,<sp/>on<sp/>PC<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>system<sp/>memory<sp/>heap<sp/>groups.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isCPUVisible<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>true,<sp/>the<sp/>GPU<sp/>can<sp/>access<sp/>this<sp/>memory<sp/>directly<sp/>without<sp/>going</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>over<sp/>a<sp/>bus<sp/>like<sp/>PCIE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>consoles<sp/>this<sp/>is<sp/>usually<sp/>true<sp/>for<sp/>all<sp/>heap<sp/>groups,<sp/>on<sp/>PC<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>memory<sp/>dedicated<sp/>to<sp/>the<sp/>GPU.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isGPULocal<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Special<sp/>on<sp/>chip<sp/>memory,<sp/>like<sp/>ESRAM<sp/>of<sp/>the<sp/>XB1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isOnChip<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>maximum<sp/>size<sp/>of<sp/>a<sp/>resource<sp/>that<sp/>can<sp/>be<sp/>placed<sp/>into<sp/>a<sp/>heap<sp/>of<sp/>this<sp/>group.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>uint64_t<sp/>maxResourceSize;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>maximum<sp/>size<sp/>of<sp/>a<sp/>individual<sp/>heap,<sp/>this<sp/>is<sp/>usually<sp/>limited<sp/>by<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>amount<sp/>that<sp/>is<sp/>installed<sp/>in<sp/>the<sp/>system.<sp/>Drivers<sp/>may<sp/>impose<sp/>other<sp/>limitations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>uint64_t<sp/>maxHeapSize;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>hint<sp/>for<sp/>the<sp/>user<sp/>to<sp/>try<sp/>to<sp/>aim<sp/>for<sp/>this<sp/>heap<sp/>size<sp/>for<sp/>best<sp/>performance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Larger<sp/>heaps<sp/>until<sp/>maxHeapSize<sp/>are<sp/>still<sp/>possible,<sp/>but<sp/>larger<sp/>heaps<sp/>than<sp/>optimalMaxHeapSize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>may<sp/>yield<sp/>worse<sp/>performance,<sp/>as<sp/>the<sp/>runtime<sp/>may<sp/>has<sp/>to<sp/>use<sp/>sub-optimal<sp/>memory<sp/>sources</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>satisfy<sp/>the<sp/>allocation<sp/>request.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>value<sp/>of<sp/>0<sp/>indicates<sp/>that<sp/>there<sp/>is<sp/>no<sp/>optimal<sp/>size<sp/>and<sp/>any<sp/>size<sp/>is<sp/>expected<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>perform<sp/>similarly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>example<sp/>on<sp/>DX12<sp/>on<sp/>Windows<sp/>the<sp/>optimal<sp/>size<sp/>is<sp/>64<sp/>MiBytes,<sp/>suggested<sp/>by<sp/>MS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>representatives,<sp/>as<sp/>windows<sp/>may<sp/>not<sp/>be<sp/>able<sp/>to<sp/>provide<sp/>heaps<sp/>in<sp/>the<sp/>requested</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>memory<sp/>source.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>uint64_t<sp/>optimalMaxHeapSize;</highlight></codeline>
<codeline lineno="648"><highlight class="normal">};</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650" refid="struct_resource_allocation_properties" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_resource_allocation_properties" kindref="compound">ResourceAllocationProperties</ref></highlight></codeline>
<codeline lineno="651"><highlight class="normal">{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeInBytes;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offsetAlignment;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>ResourceHeapGroup<sp/>*heapGroup;</highlight></codeline>
<codeline lineno="655"><highlight class="normal">};</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>set<sp/>of<sp/>flags<sp/>that<sp/>steer<sp/>the<sp/>behavior<sp/>of<sp/>the<sp/>driver<sp/>during<sp/>creation<sp/>of<sp/>resource<sp/>heaps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>ResourceHeapCreateFlag</highlight></codeline>
<codeline lineno="659"><highlight class="normal">{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>By<sp/>default<sp/>the<sp/>drivers<sp/>are<sp/>allowed<sp/>to<sp/>use<sp/>already<sp/>reserved<sp/>memory<sp/>of<sp/>internal<sp/>heaps,<sp/>to<sp/>source<sp/>the<sp/>needed<sp/>memory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Drivers<sp/>are<sp/>also<sp/>allowed<sp/>to<sp/>allocate<sp/>larger<sp/>memory<sp/>heaps<sp/>and<sp/>use<sp/>the<sp/>excess<sp/>memory<sp/>for<sp/>their<sp/>internal<sp/>resource</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>memory<sp/>management.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>RHCF_NONE<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Resource<sp/>heaps<sp/>created<sp/>with<sp/>this<sp/>flag,<sp/>will<sp/>use<sp/>their<sp/>own<sp/>dedicate<sp/>memory<sp/>heap<sp/>to<sp/>supply<sp/>the<sp/>memory<sp/>for<sp/>resources.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>this<sp/>flag<sp/>is<sp/>not<sp/>used<sp/>to<sp/>create<sp/>a<sp/>resource<sp/>heap,<sp/>the<sp/>driver<sp/>is<sp/>allowed<sp/>to<sp/>source<sp/>the<sp/>need<sp/>memory<sp/>from<sp/>existing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>driver<sp/>managed<sp/>heaps,<sp/>or<sp/>create<sp/>a<sp/>larger<sp/>underlying<sp/>memory<sp/>heap<sp/>and<sp/>use<sp/>the<sp/>excess<sp/>memory<sp/>for<sp/>its<sp/>internal<sp/>resource</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>memory<sp/>management.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>flag<sp/>should<sp/>be<sp/>used<sp/>only<sp/>when<sp/>really<sp/>necessary,<sp/>as<sp/>it<sp/>restricts<sp/>the<sp/>drivers<sp/>option<sp/>to<sp/>use<sp/>already<sp/>reserved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>memory<sp/>for<sp/>this<sp/>heap<sp/>and<sp/>increase<sp/>the<sp/>memory<sp/>pressure<sp/>on<sp/>the<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>RHCF_REQUIRES_DEDICATED_HEAP<sp/>=<sp/>1u<sp/>&lt;&lt;<sp/>0,</highlight></codeline>
<codeline lineno="671"><highlight class="normal">};</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ResourceHeapCreateFlags<sp/>=<sp/>uint32_t;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResourceHeap;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677" refid="struct_render_target" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_render_target" kindref="compound">RenderTarget</ref></highlight></codeline>
<codeline lineno="678"><highlight class="normal">{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>uint32_t<sp/>mip_level;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>uint32_t<sp/>layer;</highlight></codeline>
<codeline lineno="682"><highlight class="normal">};</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="690" refid="struct_render_pass_bind" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_render_pass_bind" kindref="compound">RenderPassBind</ref></highlight></codeline>
<codeline lineno="691"><highlight class="normal">{</highlight></codeline>
<codeline lineno="693" refid="struct_render_pass_bind_1a76b73abd7c81e03b0767c02a4eba4849" refkind="member"><highlight class="normal"><sp/><sp/>int32_t<sp/><ref refid="struct_render_pass_bind_1a76b73abd7c81e03b0767c02a4eba4849" kindref="member">target</ref>;</highlight></codeline>
<codeline lineno="695" refid="struct_render_pass_bind_1a491792959dae830d192d1231048825f9" refkind="member"><highlight class="normal"><sp/><sp/>int32_t<sp/><ref refid="struct_render_pass_bind_1a491792959dae830d192d1231048825f9" kindref="member">subpass</ref>;</highlight></codeline>
<codeline lineno="697" refid="struct_render_pass_bind_1a5a429d7438f860887a5b52ea9aac9788" refkind="member"><highlight class="normal"><sp/><sp/>int32_t<sp/><ref refid="struct_render_pass_bind_1a5a429d7438f860887a5b52ea9aac9788" kindref="member">slot</ref>;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="700" refid="struct_render_pass_bind_1a21117c567ac252a82203413c56e49ab2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="group___render_pass_consts_1ga8431b4a076f4044781f7f7189e8d8533" kindref="member">RenderPassTargetAction</ref><sp/><ref refid="struct_render_pass_bind_1a21117c567ac252a82203413c56e49ab2" kindref="member">action</ref>;</highlight></codeline>
<codeline lineno="702" refid="struct_render_pass_bind_1a9acc0955c7828e84d9bb1aece0a182c4" refkind="member"><highlight class="normal"><sp/><sp/>ResourceBarrier<sp/><ref refid="struct_render_pass_bind_1a9acc0955c7828e84d9bb1aece0a182c4" kindref="member">dependencyBarrier</ref>;</highlight></codeline>
<codeline lineno="703"><highlight class="normal">};</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="707" refid="struct_render_pass_target_desc" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_render_pass_target_desc" kindref="compound">RenderPassTargetDesc</ref></highlight></codeline>
<codeline lineno="708"><highlight class="normal">{</highlight></codeline>
<codeline lineno="710" refid="struct_render_pass_target_desc_1a05896be5b9ad0c26353929d1893fd650" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*<ref refid="struct_render_pass_target_desc_1a05896be5b9ad0c26353929d1893fd650" kindref="member">templateResource</ref>;</highlight></codeline>
<codeline lineno="712" refid="struct_render_pass_target_desc_1adb0b976b127b7debab3385de095a85de" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="struct_render_pass_target_desc_1adb0b976b127b7debab3385de095a85de" kindref="member">texcf</ref>;</highlight></codeline>
<codeline lineno="714" refid="struct_render_pass_target_desc_1aa3e300d8c7ae9f0a96ca5570d63d422c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_render_pass_target_desc_1aa3e300d8c7ae9f0a96ca5570d63d422c" kindref="member">aliased</ref>;</highlight></codeline>
<codeline lineno="715"><highlight class="normal">};</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="718" refid="struct_render_pass_target" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_render_pass_target" kindref="compound">RenderPassTarget</ref></highlight></codeline>
<codeline lineno="719"><highlight class="normal">{</highlight></codeline>
<codeline lineno="721" refid="struct_render_pass_target_1a578000519993e9a70968d322eef26f63" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="struct_render_target" kindref="compound">RenderTarget</ref><sp/><ref refid="struct_render_pass_target_1a578000519993e9a70968d322eef26f63" kindref="member">resource</ref>;</highlight></codeline>
<codeline lineno="723" refid="struct_render_pass_target_1ab90b06c8e28e16fa35cea8c2a800fa51" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="union_resource_clear_value" kindref="compound">ResourceClearValue</ref><sp/><ref refid="struct_render_pass_target_1ab90b06c8e28e16fa35cea8c2a800fa51" kindref="member">clearValue</ref>;</highlight></codeline>
<codeline lineno="724"><highlight class="normal">};</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="727" refid="struct_render_pass_desc" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_render_pass_desc" kindref="compound">RenderPassDesc</ref></highlight></codeline>
<codeline lineno="728"><highlight class="normal">{</highlight></codeline>
<codeline lineno="730" refid="struct_render_pass_desc_1a10c65882d7504de102fa6a26e1c6e2d9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="struct_render_pass_desc_1a10c65882d7504de102fa6a26e1c6e2d9" kindref="member">debugName</ref>;</highlight></codeline>
<codeline lineno="732" refid="struct_render_pass_desc_1a55264431c437eefc29143cdfa8b15e45" refkind="member"><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="struct_render_pass_desc_1a55264431c437eefc29143cdfa8b15e45" kindref="member">targetCount</ref>;</highlight></codeline>
<codeline lineno="734" refid="struct_render_pass_desc_1ad1bbfe0d049f985f8b738964fccdb758" refkind="member"><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="struct_render_pass_desc_1ad1bbfe0d049f985f8b738964fccdb758" kindref="member">bindCount</ref>;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="737" refid="struct_render_pass_desc_1ae1ea021ad80fc94f89aa6228956624fe" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_render_pass_target_desc" kindref="compound">RenderPassTargetDesc</ref><sp/>*<ref refid="struct_render_pass_desc_1ae1ea021ad80fc94f89aa6228956624fe" kindref="member">targetsDesc</ref>;</highlight></codeline>
<codeline lineno="739" refid="struct_render_pass_desc_1a83587cfef2f495314d3161324e4bde50" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_render_pass_bind" kindref="compound">RenderPassBind</ref><sp/>*<ref refid="struct_render_pass_desc_1a83587cfef2f495314d3161324e4bde50" kindref="member">binds</ref>;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="744" refid="struct_render_pass_desc_1a7a6a51bace4c444b02ae4ddf90519141" refkind="member"><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="struct_render_pass_desc_1a7a6a51bace4c444b02ae4ddf90519141" kindref="member">subpassBindingOffset</ref>;</highlight></codeline>
<codeline lineno="745"><highlight class="normal">};</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="748" refid="struct_render_pass_area" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_render_pass_area" kindref="compound">RenderPassArea</ref></highlight></codeline>
<codeline lineno="749"><highlight class="normal">{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/>uint32_t<sp/>left;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>uint32_t<sp/>top;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>uint32_t<sp/>width;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>uint32_t<sp/>height;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>minZ;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>maxZ;</highlight></codeline>
<codeline lineno="756"><highlight class="normal">};</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaced3d" kindref="compound">d3d</ref></highlight></codeline>
<codeline lineno="761"><highlight class="normal">{</highlight></codeline>
<codeline lineno="763"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">RenderPass;</highlight></codeline>
<codeline lineno="764"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>d3d</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NOTE:<sp/>even<sp/>if<sp/>numPackedMips<sp/>is<sp/>zero,<sp/>numTilesNeededForPackedMips<sp/>may<sp/>be<sp/>greater<sp/>than<sp/>zero,<sp/>which<sp/>is<sp/>a<sp/>special<sp/>case,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>numTilesNeededForPackedMips<sp/>tiles<sp/>still<sp/>need<sp/>to<sp/>be<sp/>assigned<sp/>at<sp/>numUnpackedMips.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768" refid="struct_texture_tiling_info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_texture_tiling_info" kindref="compound">TextureTilingInfo</ref></highlight></codeline>
<codeline lineno="769"><highlight class="normal">{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>totalNumberOfTiles;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numUnpackedMips;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numPackedMips;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numTilesNeededForPackedMips;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>firstPackedTileIndex;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>tileWidthInPixels;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>tileHeightInPixels;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>tileDepthInPixels;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>tileMemorySize;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>subresourceWidthInTiles;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>subresourceHeightInTiles;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>subresourceDepthInTiles;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>subresourceStartTileIndex;</highlight></codeline>
<codeline lineno="784"><highlight class="normal">};</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786" refid="struct_tile_mapping" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_tile_mapping" kindref="compound">TileMapping</ref></highlight></codeline>
<codeline lineno="787"><highlight class="normal">{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>texX;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>tile<sp/>coordinates<sp/>in<sp/>tiles,<sp/>not<sp/>pixels!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>texY;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>tile<sp/>coordinates<sp/>in<sp/>tiles,<sp/>not<sp/>pixels!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>texZ;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>tile<sp/>coordinates<sp/>in<sp/>tiles,<sp/>not<sp/>pixels!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>texSubresource;<sp/></highlight><highlight class="comment">//<sp/>The<sp/>index<sp/>of<sp/>the<sp/>subresource.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>heapTileIndex;<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>index<sp/>of<sp/>the<sp/>tile<sp/>in<sp/>the<sp/>heap.<sp/>Not<sp/>bytes,<sp/>but<sp/>tile<sp/>index!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>heapTileSpan;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>number<sp/>of<sp/>tiles<sp/>to<sp/>map.<sp/>Zero<sp/>is<sp/>invalid,<sp/>and<sp/>if<sp/>it<sp/>is<sp/>not<sp/>one,<sp/>an<sp/>array<sp/>of<sp/>tiles<sp/>will<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mapped,<sp/>to<sp/>the<sp/>specified<sp/>location.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Example<sp/>usage<sp/>for<sp/>this<sp/>is<sp/>packed<sp/>mip<sp/>tails.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>Map<sp/>to<sp/>subresource<sp/>TextureTilingInfo::numUnpackedMips<sp/>at<sp/>0,<sp/>0,<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>Use<sp/>a<sp/>span<sp/>of<sp/>TextureTilingInfo::numTilesNeededForPackedMips<sp/>so<sp/>the<sp/>whole<sp/>mip<sp/>tail<sp/>can<sp/>be<sp/>mapped<sp/>at<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>From<sp/>TileMapping::heapTileIndex<sp/>the<sp/>given<sp/>number<sp/>of<sp/>tiles<sp/>will<sp/>be<sp/>mapped<sp/>to<sp/>the<sp/>packed<sp/>mip<sp/>tail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal">};</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>APISupport</highlight></codeline>
<codeline lineno="802"><highlight class="normal">{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>FULL_SUPPORT,</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/>OUTDATED_DRIVER,</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/>BLACKLISTED_DRIVER,</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/>NO_DEVICE_FOUND</highlight></codeline>
<codeline lineno="807"><highlight class="normal">};</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaced3d" kindref="compound">d3d</ref></highlight></codeline>
<codeline lineno="811"><highlight class="normal">{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ResUpdateBuffer;</highlight></codeline>
<codeline lineno="813"><highlight class="normal">}</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="comment">//---<sp/>3d<sp/>driver<sp/>interface<sp/>-------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaced3d" kindref="compound">d3d</ref></highlight></codeline>
<codeline lineno="817"><highlight class="normal">{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal">{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>USAGE_TEXTURE<sp/>=<sp/>0x01,</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/>USAGE_DEPTH<sp/>=<sp/>0x02,</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/>USAGE_RTARGET<sp/>=<sp/>0x04,</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>USAGE_AUTOGENMIPS<sp/>=<sp/>0x08,</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/>USAGE_FILTER<sp/>=<sp/>0x10,</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/>USAGE_BLEND<sp/>=<sp/>0x20,</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/>USAGE_VERTEXTEXTURE<sp/>=<sp/>0x40,</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>USAGE_SRGBREAD<sp/>=<sp/>0x80,</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/>USAGE_SRGBWRITE<sp/>=<sp/>0x100,</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/>USAGE_SAMPLECMP<sp/>=<sp/>0x200,</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/>USAGE_PIXREADWRITE<sp/>=<sp/>0x400,</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/>USAGE_TILED<sp/>=<sp/>0x800,</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>USAGE_UNORDERED<sp/>=<sp/>0x1000,</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><ref refid="namespaced3d_1add75bb6825def85e014f2b276ae1ea84aa6457b22023fb792606cf7f28fc03927" kindref="member">USAGE_UNORDERED_LOAD</ref><sp/>=<sp/>0x2000</highlight></codeline>
<codeline lineno="835" refid="namespaced3d_1add75bb6825def85e014f2b276ae1ea84aa6457b22023fb792606cf7f28fc03927" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal">{</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/>CAPFMT_X8R8G8B8,</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>CAPFMT_R8G8B8,</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/>CAPFMT_R5G6B5,</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/>CAPFMT_X1R5G5B5,</highlight></codeline>
<codeline lineno="843"><highlight class="normal">};</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>update_window_mode();</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="849" refid="namespaced3d_1afb647ba2eb641e33f949eeb6f1d871e7" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1afb647ba2eb641e33f949eeb6f1d871e7" kindref="member">guess_gpu_vendor</ref>(String<sp/>*out_gpu_desc<sp/>=<sp/>NULL,<sp/>uint32_t<sp/>*out_drv_ver<sp/>=<sp/>NULL,<sp/>DagorDateTime<sp/>*out_drv_date<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/>uint32_t<sp/>*device_id<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal">DagorDateTime<sp/>get_gpu_driver_date(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vendor);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="856" refid="namespaced3d_1ae63838606341034873324244d9d71e39" refkind="member"><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1ae63838606341034873324244d9d71e39" kindref="member">get_dedicated_gpu_memory_size_kb</ref>();</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>get_free_dedicated_gpu_memory_size_kb();</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="860" refid="namespaced3d_1ac6a266cd5cc54fc658a1ed7d1013f2d6" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1ac6a266cd5cc54fc658a1ed7d1013f2d6" kindref="member">get_current_gpu_memory_kb</ref>(uint32_t<sp/>*dedicated_total,<sp/>uint32_t<sp/>*dedicated_free);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>get_gpu_freq(String<sp/>&amp;out_freq);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_gpu_temperature();</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>get_video_vendor_str(String<sp/>&amp;out_str);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="867" refid="namespaced3d_1a2f75542849c38587ca473e6eb7846ad7" refkind="member"><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a2f75542849c38587ca473e6eb7846ad7" kindref="member">get_display_scale</ref>();</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Override<sp/>profile<sp/>SLI<sp/>settings,<sp/>must<sp/>be<sp/>called<sp/>before<sp/>device<sp/>creation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>disable_sli();</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RENDER_TO_WHOLE_ARRAY<sp/>=<sp/>1023;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!_TARGET_D3D_MULTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Driver<sp/>initialization<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="877" refid="namespaced3d_1aa0bc22c1f07cea2f37749ce21d960075" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1aa0bc22c1f07cea2f37749ce21d960075" kindref="member">init_driver</ref>();</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="880" refid="namespaced3d_1ad725146ae57b26ebb9b05f65b9a011bb" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1ad725146ae57b26ebb9b05f65b9a011bb" kindref="member">is_inited</ref>();</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="886" refid="namespaced3d_1a186310cef7b61e92c0551be034e2d454" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a186310cef7b61e92c0551be034e2d454" kindref="member">init_video</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*hinst,<sp/>main_wnd_f<sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*wcname,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncmdshow,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*&amp;mainwnd,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*renderwnd,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*hicon,</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*title,<sp/><ref refid="class_driver3d_init_callback" kindref="compound">Driver3dInitCallback</ref><sp/>*cb);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="890" refid="namespaced3d_1aea361cad7afab93185d74b2299072a61" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1aea361cad7afab93185d74b2299072a61" kindref="member">release_driver</ref>();</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="893" refid="namespaced3d_1a8ab3cd6957f1253c3887de63a20d5f5f" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a8ab3cd6957f1253c3887de63a20d5f5f" kindref="member">fill_interface_table</ref>(D3dInterfaceTable<sp/>&amp;d3dit);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="897" refid="namespaced3d_1a5034d7807b89ba81b11bb22e5272b8ac" refkind="member"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="namespaced3d_1a5034d7807b89ba81b11bb22e5272b8ac" kindref="member">get_driver_name</ref>();</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="900" refid="namespaced3d_1a68e158a74869106f5e0d9196f37ecc44" refkind="member"><highlight class="normal">DriverCode<sp/><ref refid="namespaced3d_1a68e158a74869106f5e0d9196f37ecc44" kindref="member">get_driver_code</ref>();</highlight></codeline>
<codeline lineno="902"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_stub_driver()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a68e158a74869106f5e0d9196f37ecc44" kindref="member">get_driver_code</ref>().is(d3d::stub);<sp/>}</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="905" refid="namespaced3d_1ae3edac783625344a307d1332c548ddd8" refkind="member"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="namespaced3d_1ae3edac783625344a307d1332c548ddd8" kindref="member">get_device_driver_version</ref>();</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="908" refid="namespaced3d_1a4bc42172783719718a0fdfb23340ba1e" refkind="member"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="namespaced3d_1a4bc42172783719718a0fdfb23340ba1e" kindref="member">get_device_name</ref>();</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="911" refid="namespaced3d_1a1f0dd13f5310b20f32e045bb3cfe85f3" refkind="member"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="namespaced3d_1a1f0dd13f5310b20f32e045bb3cfe85f3" kindref="member">get_last_error</ref>();</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal">uint32_t<sp/>get_last_error_code();</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="916" refid="namespaced3d_1a149b153338e3dc0e06d291593801a60a" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a149b153338e3dc0e06d291593801a60a" kindref="member">prepare_for_destroy</ref>();</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="919" refid="namespaced3d_1aec4eb6c4d1b8c06690efa1feb137edb1" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1aec4eb6c4d1b8c06690efa1feb137edb1" kindref="member">window_destroyed</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*hwnd);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Device<sp/>management</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="925" refid="namespaced3d_1a04054b402101416cf3fbd55de0529d36" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="namespaced3d_1a04054b402101416cf3fbd55de0529d36" kindref="member">get_device</ref>();</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="928" refid="namespaced3d_1ac1623a0439d5fba235eeb2d6c852de93" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="namespaced3d_1ac1623a0439d5fba235eeb2d6c852de93" kindref="member">get_context</ref>();</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="931" refid="namespaced3d_1a2bd9fa4ac4aa9f3c4fa51bf5c53ebd37" refkind="member"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_driver3d_desc" kindref="compound">Driver3dDesc</ref><sp/>&amp;<ref refid="namespaced3d_1a2bd9fa4ac4aa9f3c4fa51bf5c53ebd37" kindref="member">get_driver_desc</ref>();</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="934" refid="namespaced3d_1abb7a0b66f9e6134fa96d27d8b9a44144" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1abb7a0b66f9e6134fa96d27d8b9a44144" kindref="member">driver_command</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>command,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*par1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*par2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*par3);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="938" refid="namespaced3d_1ab801ed189fe16e1552ffa91d625531ce" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1ab801ed189fe16e1552ffa91d625531ce" kindref="member">device_lost</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*can_reset_now);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="941" refid="namespaced3d_1ab2e68d4ecbe9941f291b92acd54b17b8" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1ab2e68d4ecbe9941f291b92acd54b17b8" kindref="member">reset_device</ref>();</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="944" refid="namespaced3d_1a08f6ae41faad34082ea4333463861403" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a08f6ae41faad34082ea4333463861403" kindref="member">is_in_device_reset_now</ref>();</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="947" refid="namespaced3d_1a76601ecfcb78e566326c4e233a9828ba" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a76601ecfcb78e566326c4e233a9828ba" kindref="member">is_window_occluded</ref>();</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="950" refid="namespaced3d_1ac648d85b061093c02270e382100668ff" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1ac648d85b061093c02270e382100668ff" kindref="member">should_use_compute_for_image_processing</ref>(std::initializer_list&lt;unsigned&gt;<sp/>formats);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Texture<sp/>management</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="957" refid="namespaced3d_1a8c61028441259d53c73dc90d57b0b6d9" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a8c61028441259d53c73dc90d57b0b6d9" kindref="member">check_texformat</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cflg);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="960" refid="namespaced3d_1aefabbad9cd546d9409d5bca001e44344" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1aefabbad9cd546d9409d5bca001e44344" kindref="member">get_max_sample_count</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cflg);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>get_texformat_usage(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cflg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>restype<sp/>=<sp/>RES3D_TEX);</highlight></codeline>
<codeline lineno="964" refid="namespaced3d_1a11442e47eb3c1cd4541019b8c4dfb10e" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a11442e47eb3c1cd4541019b8c4dfb10e" kindref="member">issame_texformat</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cflg1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cflg2);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="968" refid="namespaced3d_1a72451b65a81d37c1643961a00a532865" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a72451b65a81d37c1643961a00a532865" kindref="member">check_cubetexformat</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cflg);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="971" refid="namespaced3d_1a1610608e811b306b18fdd9f11c48a4d8" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a1610608e811b306b18fdd9f11c48a4d8" kindref="member">issame_cubetexformat</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cflg1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cflg2);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="975" refid="namespaced3d_1a27615e6293566df34fd0726f55ba81d5" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a27615e6293566df34fd0726f55ba81d5" kindref="member">check_voltexformat</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cflg);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="978" refid="namespaced3d_1a5254706fe1bc259630c1e45549556bb1" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a5254706fe1bc259630c1e45549556bb1" kindref="member">issame_voltexformat</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cflg1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cflg2);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="986" refid="namespaced3d_1a62238877e9822de5c58966ae2fcc6cff" refkind="member"><highlight class="normal"><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*<ref refid="namespaced3d_1a62238877e9822de5c58966ae2fcc6cff" kindref="member">create_tex</ref>(TexImage32<sp/>*img,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>levels,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name<sp/>=<sp/>NULL);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="992" refid="namespaced3d_1a5eefb943af7882eca767cad1e544edcc" refkind="member"><highlight class="normal"><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*<ref refid="namespaced3d_1a5eefb943af7882eca767cad1e544edcc" kindref="member">create_ddsx_tex</ref>(IGenLoad<sp/>&amp;crd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>quality_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>levels<sp/>=<sp/>0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name<sp/>=<sp/>NULL);</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="996" refid="namespaced3d_1aa65369b51396c51219be11d6e3600381" refkind="member"><highlight class="normal"><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*<ref refid="namespaced3d_1aa65369b51396c51219be11d6e3600381" kindref="member">alloc_ddsx_tex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ddsx::Header<sp/>&amp;hdr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>quality_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>levels<sp/>=<sp/>0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stub_tex_idx<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>load_ddsx_tex_contents(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ddsx::Header<sp/>&amp;hdr,<sp/>IGenLoad<sp/>&amp;crd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>q_id)</highlight></codeline>
<codeline lineno="1001"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d3d_load_ddsx_tex_contents<sp/>?<sp/>d3d_load_ddsx_tex_contents(t,<sp/>t-&gt;getTID(),<sp/>BAD_TEXTUREID,<sp/>hdr,<sp/>crd,<sp/>q_id,<sp/>0,<sp/>0)<sp/>:<sp/>false;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010" refid="namespaced3d_1a667a48cd330d9efc7469b9b349af7a67" refkind="member"><highlight class="normal"><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*<ref refid="namespaced3d_1a667a48cd330d9efc7469b9b349af7a67" kindref="member">create_cubetex</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>levels,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name<sp/>=<sp/>NULL);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016" refid="namespaced3d_1a1e6099f3bf02d12737baa48a4eaf9242" refkind="member"><highlight class="normal"><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*<ref refid="namespaced3d_1a1e6099f3bf02d12737baa48a4eaf9242" kindref="member">create_voltex</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>levels,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name<sp/>=<sp/>NULL);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022" refid="namespaced3d_1aa083d67f9369154e61f3538bd659642e" refkind="member"><highlight class="normal"><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*<ref refid="namespaced3d_1aa083d67f9369154e61f3538bd659642e" kindref="member">create_array_tex</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>levels,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>will<sp/>just<sp/>create<sp/>ArrayTexture<sp/>with<sp/>d*6<sp/>layers,<sp/>ehich<sp/>also<sp/>has<sp/>Cube</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*create_cube_array_tex(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>side,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>levels,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name);<sp/></highlight><highlight class="comment">//<sp/>total<sp/>layers<sp/>d*6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034" refid="namespaced3d_1a2aa7de1a440223bc9e0fef7b5f26a23e" refkind="member"><highlight class="normal"><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*<ref refid="namespaced3d_1a2aa7de1a440223bc9e0fef7b5f26a23e" kindref="member">alias_tex</ref>(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*baseTexture,<sp/>TexImage32<sp/>*img,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>levels,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name<sp/>=<sp/>NULL);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*alias_cubetex(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*baseTexture,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>levels,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name<sp/>=<sp/>NULL);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*alias_voltex(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*baseTexture,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>levels,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name<sp/>=<sp/>NULL);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*alias_array_tex(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*baseTexture,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>levels,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*alias_cube_array_tex(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*baseTexture,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>side,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>levels,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_tex_usage_hint(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mips,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tex_num);</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043" refid="namespaced3d_1a8a2eb82e82cdf910a3af0a093f75fe31" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a8a2eb82e82cdf910a3af0a093f75fe31" kindref="member">discard_managed_textures</ref>();</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stretch_rect(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*src,<sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*dst,<sp/>RectInt<sp/>*rsrc<sp/>=<sp/>NULL,<sp/>RectInt<sp/>*rdst<sp/>=<sp/>NULL);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copy_from_current_render_target(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*to_tex);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>get_texture_statistics(uint32_t<sp/>*num_textures,<sp/>uint64_t<sp/>*total_mem,<sp/>String<sp/>*out_dump);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Texture<sp/>states<sp/>setup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="comment">//<sp/>r/o<sp/>and<sp/>r/w<sp/>resource<sp/>slots<sp/>are<sp/>independent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight><highlight class="comment">//<sp/>shader_stage<sp/>is<sp/>STAGE_xS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_tex(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>shader_stage,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>slot,<sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_sampler<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>settex(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slot,<sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_tex(STAGE_PS,<sp/>slot,<sp/>tex);<sp/>}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>settex_vs(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slot,<sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_tex(STAGE_VS,<sp/>slot,<sp/>tex);<sp/>}</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>the<sp/>sampler<sp/>with<sp/>the<sp/>given<sp/>sampler<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Identical<sp/>infos<sp/>may<sp/>yield<sp/>both<sp/>identical<sp/>handles<sp/>and<sp/>different<sp/>ones,<sp/>it<sp/>depends<sp/>on<sp/>driver<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>call<sp/>is<sp/>thread-safe<sp/>and<sp/>does<sp/>not<sp/>require<sp/>external<sp/>synchronization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal">SamplerHandle<sp/>create_sampler(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SamplerInfo<sp/>&amp;sampler_info);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Destroys<sp/>given<sp/>sampler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>driver<sp/>may<sp/>not<sp/>actually<sp/>destroy<sp/>the<sp/>sampler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Using<sp/>this<sp/>sampler<sp/>after<sp/>calling<sp/>this<sp/>function<sp/>is<sp/>UB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>destroy_sampler(SamplerHandle<sp/>sampler);</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Binds<sp/>given<sp/>sampler<sp/>to<sp/>the<sp/>slot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>call<sp/>is<sp/>not<sp/>thread-safe,<sp/>requires<sp/>global<sp/>gpu<sp/>lock<sp/>to<sp/>be<sp/>holded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_sampler(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>shader_stage,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>slot,<sp/>SamplerHandle<sp/>sampler);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Registers<sp/>the<sp/>sampler<sp/>portion<sp/>of<sp/>the<sp/>given<sp/>texture<sp/>into<sp/>the<sp/>global<sp/>bindless<sp/>sampler<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Textures<sp/>with<sp/>identical<sp/>samplers<sp/>may<sp/>yield<sp/>identical<sp/>return<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal">uint32_t<sp/>register_bindless_sampler(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*texture);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allocates<sp/>a<sp/>persistent<sp/>bindless<sp/>slot<sp/>range<sp/>of<sp/>the<sp/>given<sp/>&apos;resource_type&apos;<sp/>resource<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>&apos;resource_type&apos;<sp/>must<sp/>be<sp/>one<sp/>of<sp/>RES3D_<sp/>enum<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>&apos;count&apos;<sp/>must<sp/>be<sp/>larger<sp/>than<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returned<sp/>value<sp/>is<sp/>the<sp/>first<sp/>slot<sp/>index<sp/>into<sp/>the<sp/>bindless<sp/>heap<sp/>of<sp/>the<sp/>requested<sp/>range.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal">uint32_t<sp/>allocate_bindless_resource_range(uint32_t<sp/>resource_type,<sp/>uint32_t<sp/>count);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Resizes<sp/>a<sp/>previously<sp/>allocate<sp/>bindless<sp/>slot<sp/>range.<sp/>It<sp/>can<sp/>shrink<sp/>and<sp/>enlarge<sp/>a<sp/>slot<sp/>range.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>contents<sp/>of<sp/>all<sp/>slots<sp/>of<sp/>the<sp/>old<sp/>range<sp/>are<sp/>migrated<sp/>to<sp/>the<sp/>new<sp/>range,<sp/>so<sp/>only<sp/>new<sp/>entries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="comment">//<sp/>have<sp/>to<sp/>be<sp/>updated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>&apos;resource_type&apos;<sp/>must<sp/>be<sp/>one<sp/>of<sp/>RES3D_<sp/>enum<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>&apos;index&apos;<sp/>must<sp/>be<sp/>in<sp/>a<sp/>previously<sp/>allocated<sp/>bindless<sp/>range,<sp/>or<sp/>any<sp/>value<sp/>if<sp/>&apos;current_count&apos;<sp/>is<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>&apos;current_count&apos;<sp/>most<sp/>be<sp/>either<sp/>within<sp/>a<sp/>previously<sp/>allocated<sp/>bindless<sp/>slot<sp/>range<sp/>or<sp/>0,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>when<sp/>0<sp/>then<sp/>it<sp/>behaves<sp/>like<sp/>&apos;allocate_bindless_resource_range&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>&apos;new_count&apos;<sp/>can<sp/>be<sp/>larger<sp/>or<sp/>smaller<sp/>than<sp/>&apos;current_count&apos;,<sp/>shrinks<sp/>or<sp/>enlarges<sp/>the<sp/>slot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>range<sp/>accordingly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>returned<sp/>value<sp/>is<sp/>the<sp/>first<sp/>slot<sp/>of<sp/>the<sp/>new<sp/>range.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal">uint32_t<sp/>resize_bindless_resource_range(uint32_t<sp/>resource_type,<sp/>uint32_t<sp/>index,<sp/>uint32_t<sp/>current_count,<sp/>uint32_t<sp/>new_count);</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Frees<sp/>previously<sp/>allocated<sp/>slot<sp/>range.<sp/>This<sp/>can<sp/>also<sp/>be<sp/>used<sp/>to<sp/>shrink<sp/>ranges,<sp/>similarly<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&apos;resize_bindless_resource_range&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>&apos;resource_type&apos;<sp/>must<sp/>be<sp/>one<sp/>of<sp/>RES3D_<sp/>enum<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>&apos;index&apos;<sp/>must<sp/>be<sp/>in<sp/>a<sp/>previously<sp/>allocated<sp/>bindless<sp/>range,<sp/>or<sp/>any<sp/>value<sp/>if<sp/>&apos;count&apos;<sp/>is<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>&apos;count&apos;<sp/>plus<sp/>&apos;index&apos;<sp/>most<sp/>not<sp/>be<sp/>outside<sp/>of<sp/>any<sp/>previously<sp/>allocated<sp/>bindless<sp/>slot<sp/>range,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>can<sp/>be<sp/>0<sp/>which<sp/>will<sp/>be<sp/>a<sp/>no-op.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>free_bindless_resource_range(uint32_t<sp/>resource_type,<sp/>uint32_t<sp/>index,<sp/>uint32_t<sp/>count);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Updates<sp/>a<sp/>given<sp/>bindless<sp/>slot<sp/>with<sp/>the<sp/>reference<sp/>to<sp/>&apos;res&apos;.<sp/>The<sp/>slot<sp/>has<sp/>to<sp/>be<sp/>allocated<sp/>previously</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>corresponding<sp/>allocation<sp/>methods<sp/>with<sp/>&apos;resource_type&apos;<sp/>matching<sp/>the<sp/>restype<sp/>of<sp/>&apos;res&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>&apos;index&apos;<sp/>must<sp/>be<sp/>in<sp/>a<sp/>previously<sp/>allocated<sp/>bindless<sp/>range.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>&apos;res&apos;<sp/>must<sp/>be<sp/>a<sp/>valid<sp/>D3DResource<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>update_bindless_resource(uint32_t<sp/>index,<sp/>D3dResource<sp/>*res);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Updates<sp/>one<sp/>or<sp/>more<sp/>bindless<sp/>slots<sp/>with<sp/>a<sp/>&quot;null&quot;<sp/>resource<sp/>of<sp/>the<sp/>given<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Shader<sp/>access<sp/>to<sp/>those<sp/>slots<sp/>will<sp/>read<sp/>all<sp/>zeros<sp/>and<sp/>writes<sp/>will<sp/>be<sp/>discarded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>&apos;res_type&apos;<sp/>must<sp/>be<sp/>one<sp/>of<sp/>RES3D_<sp/>enum<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>&apos;index&apos;<sp/>must<sp/>be<sp/>in<sp/>a<sp/>previously<sp/>allocated<sp/>bindless<sp/>range.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>&apos;count&apos;<sp/>plus<sp/>&apos;index&apos;<sp/>most<sp/>not<sp/>be<sp/>outside<sp/>of<sp/>any<sp/>previously<sp/>allocated<sp/>bindless<sp/>slot<sp/>range.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>update_bindless_resources_to_null(uint32_t<sp/>resource_type,<sp/>uint32_t<sp/>index,<sp/>uint32_t<sp/>count);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as_uint<sp/>==<sp/>true,<sp/>texture<sp/>will<sp/>be<sp/>viewed<sp/>as<sp/>uint<sp/>in<sp/>UAV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://msdn.microsoft.com/en-us/library/windows/desktop/ff728749(v=vs.85).aspx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_rwtex(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>shader_stage,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>slot,<sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex,<sp/>uint32_t<sp/>face,<sp/>uint32_t<sp/>mip_level,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>as_uint<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>clear_rwtexi(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>val[4],<sp/>uint32_t<sp/>face,<sp/>uint32_t<sp/>mip_level);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>clear_rwtexf(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val[4],<sp/>uint32_t<sp/>face,<sp/>uint32_t<sp/>mip_level);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>clear_rwbufi(<ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*buf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>val[4]);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>clear_rwbuff(<ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*buf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val[4]);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Combined<sp/>programs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal">PROGRAM<sp/>create_program(VPROG<sp/>vprog,<sp/>FSHADER<sp/>fsh,<sp/>VDECL<sp/>vdecl,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>*strides<sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>streams<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>strides<sp/>&amp;<sp/>streams<sp/>are<sp/>unset,<sp/>will<sp/>get<sp/>them<sp/>from<sp/>VDECL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>should<sp/>be<sp/>deleted<sp/>externally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal">PROGRAM<sp/>create_program(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*vpr_native,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*fsh_native,<sp/>VDECL<sp/>vdecl,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>*strides<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>streams<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>strides<sp/>&amp;<sp/>streams<sp/>are<sp/>unset,<sp/>will<sp/>get<sp/>them<sp/>from<sp/>VDECL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal">PROGRAM<sp/>create_program_cs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*cs_native,<sp/>CSPreloaded<sp/>preloaded);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_program(PROGRAM);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sets<sp/>both<sp/>pixel<sp/>and<sp/>vertex<sp/>shader<sp/>and<sp/>vertex<sp/>declaration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>delete_program(PROGRAM);<sp/></highlight><highlight class="comment">//<sp/>deletes<sp/>vprog<sp/>and<sp/>fshader.<sp/>VDECL<sp/>should<sp/>be<sp/>deleted<sp/>independently</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Vertex<sp/>programs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal">VPROG<sp/>create_vertex_shader(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*native_code);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>delete_vertex_shader(VPROG<sp/>vs);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_const(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>stage,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>reg_base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_regs);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_vs_const(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>reg_base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_regs)</highlight></codeline>
<codeline lineno="1141"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_const(STAGE_VS,<sp/>reg_base,<sp/>data,<sp/>num_regs);</highlight></codeline>
<codeline lineno="1143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_ps_const(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>reg_base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_regs)</highlight></codeline>
<codeline lineno="1145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_const(STAGE_PS,<sp/>reg_base,<sp/>data,<sp/>num_regs);</highlight></codeline>
<codeline lineno="1147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_cs_const(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>reg_base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_regs)</highlight></codeline>
<codeline lineno="1149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_const(STAGE_CS,<sp/>reg_base,<sp/>data,<sp/>num_regs);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_vs_const1(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>reg,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v3)</highlight></codeline>
<codeline lineno="1153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v[4]<sp/>=<sp/>{v0,<sp/>v1,<sp/>v2,<sp/>v3};</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_vs_const(reg,<sp/>v,<sp/>1);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_ps_const1(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>reg,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v3)</highlight></codeline>
<codeline lineno="1158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v[4]<sp/>=<sp/>{v0,<sp/>v1,<sp/>v2,<sp/>v3};</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_ps_const(reg,<sp/>v,<sp/>1);</highlight></codeline>
<codeline lineno="1161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight><highlight class="comment">//<sp/>immediate<sp/>consts<sp/>are<sp/>supposed<sp/>to<sp/>be<sp/>very<sp/>cheap<sp/>to<sp/>set<sp/>dwords.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>guaranteed<sp/>to<sp/>support<sp/>up<sp/>to<sp/>4<sp/>dwords<sp/>on<sp/>each<sp/>stage.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>as<sp/>less<sp/>as<sp/>possible,<sp/>ideally<sp/>one<sp/>or<sp/>two<sp/>(or<sp/>none).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>XB1(PS4)<sp/>implemented<sp/>as<sp/>user<sp/>regs<sp/>(C|P|V)SSetShaderUserData<sp/>(user<sp/>regs)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>DX11<sp/>(and<sp/>currently<sp/>everything<sp/>else)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>VK/DX12<sp/>-<sp/>should<sp/>be<sp/>implemented<sp/>as<sp/>descriptor/push<sp/>constants<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>OpenGL<sp/>should<sp/>be<sp/>implemented<sp/>as<sp/>Uniform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight><highlight class="comment">//<sp/>calling<sp/>with<sp/>data<sp/>=<sp/>nullptr<sp/>||<sp/>num_words<sp/>==<sp/>0,<sp/>is<sp/>benign,<sp/>and<sp/>currently<sp/>works<sp/>as<sp/>&quot;stop<sp/>using<sp/>immediate&quot;(probably<sp/>have<sp/>to<sp/>be<sp/>replaced</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>shader<sp/>system)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_immediate_const(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>stage,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*data,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_words);</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Fragment<sp/>shader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal">FSHADER<sp/>create_pixel_shader(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*native_code);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>delete_pixel_shader(FSHADER<sp/>ps);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Immediate<sp/>constant<sp/>buffers<sp/>-<sp/>valid<sp/>within<sp/>min(driver<sp/>acquire,<sp/>frame)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>unbind,<sp/>use<sp/>set_const_buffer(stage,<sp/>0,<sp/>NULL<sp/>[,0])<sp/>-<sp/>generic<sp/>set_const_buffer()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>slot<sp/>=<sp/>0<sp/>is<sp/>empty<sp/>(PS/VS/CS<sp/>stages),<sp/>buffered<sp/>constants<sp/>are<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[PS4<sp/>specific]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_const_buffer(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>stage,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>slot,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_regs);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_const_buffer(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>stage,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>slot,<sp/><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*buffer,<sp/>uint32_t<sp/>consts_offset<sp/>=<sp/>0,<sp/>uint32_t<sp/>consts_size<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>set_vs_constbuffer_size(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>required_size);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>set_cs_constbuffer_size(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>required_size);</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>immediate<sp/>constants<sp/>to<sp/>const<sp/>buffer<sp/>slot<sp/>0<sp/>if<sp/>used<sp/>in<sp/>shader<sp/>explicitly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_cb0_data(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>stage,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_regs)</highlight></codeline>
<codeline lineno="1190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_TARGET_C1<sp/>|<sp/>_TARGET_C2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(stage)</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STAGE_CS:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_cs_const(0,<sp/>data,<sp/>num_regs);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STAGE_PS:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_ps_const(0,<sp/>data,<sp/>num_regs);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STAGE_VS:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_vs_const(0,<sp/>data,<sp/>num_regs);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERTF(0,<sp/></highlight><highlight class="stringliteral">&quot;Stage<sp/>%d<sp/>unsupported&quot;</highlight><highlight class="normal">,<sp/>stage);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>release_cb0_data(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>stage)</highlight></codeline>
<codeline lineno="1204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_TARGET_C1<sp/>|<sp/>_TARGET_C2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/>(void)stage;</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Vertex<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*create_vb(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size_bytes,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*create_ib(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size_bytes,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ib&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight><highlight class="comment">//<sp/>structured<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight><highlight class="comment">//<sp/>struct_size<sp/>should<sp/>match<sp/>when<sp/>used<sp/>as<sp/>Sbuffer,<sp/>Ibuffer<sp/>struct_size<sp/>is<sp/>16<sp/>or<sp/>32<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>non<sp/>structured<sp/>buffers<sp/>texfmt<sp/>can<sp/>be<sp/>set<sp/>(if<sp/>we<sp/>want<sp/>to<sp/>use<sp/>this<sp/>buffer<sp/>in<sp/>rendering)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*create_sbuffer(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>struct_size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elements,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>flags,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>texfmt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight><highlight class="comment">//<sp/>set<sp/>structure<sp/>buffer<sp/>-<sp/>uses<sp/>same<sp/>slots<sp/>as<sp/>textures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_buffer(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>shader_stage,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>slot,<sp/><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*buffer);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_rwbuffer(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>shader_stage,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>slot,<sp/><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*buffer);</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Render<sp/>targets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230" refid="namespaced3d_1a1b449228601334a2df5185520ed4c6da" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a1b449228601334a2df5185520ed4c6da" kindref="member">set_render_target</ref>();</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1233" refid="namespaced3d_1a9a3ad67c6ca271bac823cd238f940426" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a9a3ad67c6ca271bac823cd238f940426" kindref="member">set_depth</ref>(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex,<sp/>DepthAccess<sp/>access);</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a9a3ad67c6ca271bac823cd238f940426" kindref="member">set_depth</ref>(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>layer,<sp/>DepthAccess<sp/>access);</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237" refid="namespaced3d_1a1a111f103703273e5d83ddeec11749b6" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a1a111f103703273e5d83ddeec11749b6" kindref="member">set_backbuf_depth</ref>();</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243" refid="namespaced3d_1a28f040c72fcf1b5e4f660bfcefc7fcb5" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a1b449228601334a2df5185520ed4c6da" kindref="member">set_render_target</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rt_index,<sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fc,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level);</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a1b449228601334a2df5185520ed4c6da" kindref="member">set_render_target</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rt_index,<sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level);</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a1b449228601334a2df5185520ed4c6da" kindref="member">set_render_target</ref>(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a1b449228601334a2df5185520ed4c6da" kindref="member">set_render_target</ref>()<sp/>&amp;&amp;<sp/><ref refid="namespaced3d_1a1b449228601334a2df5185520ed4c6da" kindref="member">set_render_target</ref>(0,<sp/>t,<sp/>level);<sp/>}</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a1b449228601334a2df5185520ed4c6da" kindref="member">set_render_target</ref>(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fc,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a1b449228601334a2df5185520ed4c6da" kindref="member">set_render_target</ref>()<sp/>&amp;&amp;<sp/><ref refid="namespaced3d_1a1b449228601334a2df5185520ed4c6da" kindref="member">set_render_target</ref>(0,<sp/>t,<sp/>fc,<sp/>level);<sp/>}</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a1b449228601334a2df5185520ed4c6da" kindref="member">set_render_target</ref>(<ref refid="struct_render_target" kindref="compound">RenderTarget</ref><sp/>depth,<sp/>DepthAccess<sp/>depth_access,<sp/>dag::ConstSpan&lt;RenderTarget&gt;<sp/>colors)</highlight></codeline>
<codeline lineno="1249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Driver3dRenderTarget::MAX_SIMRT;<sp/>++i)</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>colors.size())</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaced3d_1a1b449228601334a2df5185520ed4c6da" kindref="member">set_render_target</ref>(i,<sp/>colors[i].tex,<sp/>colors[i].mip_level);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaced3d_1a1b449228601334a2df5185520ed4c6da" kindref="member">set_render_target</ref>(i,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><ref refid="namespaced3d_1a9a3ad67c6ca271bac823cd238f940426" kindref="member">set_depth</ref>(depth.tex,<sp/>depth_access);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a1b449228601334a2df5185520ed4c6da" kindref="member">set_render_target</ref>(<ref refid="struct_render_target" kindref="compound">RenderTarget</ref><sp/>depth,<sp/>DepthAccess<sp/>depth_access,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::initializer_list&lt;RenderTarget&gt;<sp/>colors)</highlight></codeline>
<codeline lineno="1260"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><ref refid="namespaced3d_1a1b449228601334a2df5185520ed4c6da" kindref="member">set_render_target</ref>(depth,<sp/>depth_access,<sp/>dag::ConstSpan&lt;RenderTarget&gt;(colors.begin(),<sp/>colors.end()<sp/>-<sp/>colors.begin()));</highlight></codeline>
<codeline lineno="1262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>get_render_target(Driver3dRenderTarget<sp/>&amp;out_rt);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a1b449228601334a2df5185520ed4c6da" kindref="member">set_render_target</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Driver3dRenderTarget<sp/>&amp;rt);</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1269" refid="namespaced3d_1a32ba0b93e0029c75fad830eb591e4453" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a32ba0b93e0029c75fad830eb591e4453" kindref="member">get_target_size</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;h);</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1272" refid="namespaced3d_1ab50bb526601e52a974104d2f4a6e569a" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1ab50bb526601e52a974104d2f4a6e569a" kindref="member">get_render_target_size</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;h,<sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*rt_tex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lev<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight></codeline>
<codeline lineno="1294" refid="namespaced3d_1adada975ddd08d04d15502af1ddab9346" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1adada975ddd08d04d15502af1ddab9346" kindref="member">set_variable_rate_shading</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>rate_x,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>rate_y,</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/>VariableRateShadingCombiner<sp/>vertex_combiner<sp/>=<sp/>VariableRateShadingCombiner::VRS_PASSTHROUGH,</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/>VariableRateShadingCombiner<sp/>pixel_combiner<sp/>=<sp/>VariableRateShadingCombiner::VRS_PASSTHROUGH);</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1308" refid="namespaced3d_1a05eefe81f1729532e723ccf254c8c970" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a05eefe81f1729532e723ccf254c8c970" kindref="member">set_variable_rate_shading_texture</ref>(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*rate_texture<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Rendering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>settm(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>which,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matrix44<sp/>*tm);</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>settm(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>which,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TMatrix<sp/>&amp;tm);</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>settm(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>which,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mat44f<sp/>&amp;out_tm);</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>gettm(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>which,<sp/>Matrix44<sp/>*out_tm);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>gettm(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>which,<sp/>TMatrix<sp/>&amp;out_tm);</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gettm(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>which,<sp/>mat44f<sp/>&amp;out_tm);</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mat44f<sp/>&amp;gettm_cref(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>which);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1323" refid="namespaced3d_1a84f7ca4a4b476bb7514cdbc3e5b006f8" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a84f7ca4a4b476bb7514cdbc3e5b006f8" kindref="member">getm2vtm</ref>(TMatrix<sp/>&amp;out_m2v);</highlight></codeline>
<codeline lineno="1325" refid="namespaced3d_1a31c6e5d9ebc27a64c723d38cc95b47b6" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a31c6e5d9ebc27a64c723d38cc95b47b6" kindref="member">getglobtm</ref>(Matrix44<sp/>&amp;);</highlight></codeline>
<codeline lineno="1327" refid="namespaced3d_1adb79ca2da2442765aead13ef1931ca94" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1adb79ca2da2442765aead13ef1931ca94" kindref="member">setglobtm</ref>(Matrix44<sp/>&amp;);</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a31c6e5d9ebc27a64c723d38cc95b47b6" kindref="member">getglobtm</ref>(mat44f<sp/>&amp;);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1adb79ca2da2442765aead13ef1931ca94" kindref="member">setglobtm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mat44f<sp/>&amp;);</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1333" refid="namespaced3d_1ac05952d66d795ed0eb567c51018d2cbf" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1ac05952d66d795ed0eb567c51018d2cbf" kindref="member">setpersp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Driver3dPerspective<sp/>&amp;p,<sp/>TMatrix4<sp/>*proj_tm<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1335" refid="namespaced3d_1ae329e546e7635ff77e65b4c2ce39301b" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1ae329e546e7635ff77e65b4c2ce39301b" kindref="member">getpersp</ref>(Driver3dPerspective<sp/>&amp;p);</highlight></codeline>
<codeline lineno="1337" refid="namespaced3d_1abe023d441e457494773cb2328cf90c62" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1abe023d441e457494773cb2328cf90c62" kindref="member">validatepersp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Driver3dPerspective<sp/>&amp;p);</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340" refid="namespaced3d_1aa2d9f17dd49100f45964e03fe115bd62" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1aa2d9f17dd49100f45964e03fe115bd62" kindref="member">calcproj</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Driver3dPerspective<sp/>&amp;p,<sp/>mat44f<sp/>&amp;proj_tm);</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1aa2d9f17dd49100f45964e03fe115bd62" kindref="member">calcproj</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Driver3dPerspective<sp/>&amp;p,<sp/>TMatrix4<sp/>&amp;proj_tm);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344" refid="namespaced3d_1aa70dc096983e0bfd4250d9109722f897" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1aa70dc096983e0bfd4250d9109722f897" kindref="member">calcglobtm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mat44f<sp/>&amp;view_tm,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mat44f<sp/>&amp;proj_tm,<sp/>mat44f<sp/>&amp;result);</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1aa70dc096983e0bfd4250d9109722f897" kindref="member">calcglobtm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mat44f<sp/>&amp;view_tm,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Driver3dPerspective<sp/>&amp;persp,<sp/>mat44f<sp/>&amp;result);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1aa70dc096983e0bfd4250d9109722f897" kindref="member">calcglobtm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TMatrix<sp/>&amp;view_tm,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TMatrix4<sp/>&amp;proj_tm,<sp/>TMatrix4<sp/>&amp;result);</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1aa70dc096983e0bfd4250d9109722f897" kindref="member">calcglobtm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TMatrix<sp/>&amp;view_tm,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Driver3dPerspective<sp/>&amp;persp,<sp/>TMatrix4<sp/>&amp;result);</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>setscissor(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h);</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>setscissors(dag::ConstSpan&lt;ScissorRect&gt;<sp/>scissorRects);</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>setview(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>minz,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>maxz);</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>setviews(dag::ConstSpan&lt;Viewport&gt;<sp/>viewports);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>getview(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;h,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;minz,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;maxz);</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight></codeline>
<codeline lineno="1357" refid="namespaced3d_1ab7ff07784b8e03a835498e0ef5f35fa5" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1ab7ff07784b8e03a835498e0ef5f35fa5" kindref="member">clearview</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>what,<sp/>E3DCOLOR,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z,<sp/>uint32_t<sp/>stencil);</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362" refid="namespaced3d_1a80e59079bc37b54492a90d3ec3528d66" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a80e59079bc37b54492a90d3ec3528d66" kindref="member">update_screen</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>app_active<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight></codeline>
<codeline lineno="1365" refid="namespaced3d_1a88ade7c34adbd0eabf4e7a562e843ee4" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a88ade7c34adbd0eabf4e7a562e843ee4" kindref="member">setvsrc_ex</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream,<sp/><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride_bytes);</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>setvsrc(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream,<sp/><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*vb,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride_bytes)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a88ade7c34adbd0eabf4e7a562e843ee4" kindref="member">setvsrc_ex</ref>(stream,<sp/>vb,<sp/>0,<sp/>stride_bytes);<sp/>}</highlight></codeline>
<codeline lineno="1368" refid="namespaced3d_1ab4b7355eb67812759ebadfd7cb2836f8" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1ab4b7355eb67812759ebadfd7cb2836f8" kindref="member">setind</ref>(<ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*ib);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight><highlight class="comment">//<sp/>create<sp/>dx8-style<sp/>vertex<sp/>declaration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>BAD_VDECL<sp/>on<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal">VDECL<sp/>create_vdecl(VSDTYPE<sp/>*vsd);</highlight></codeline>
<codeline lineno="1374" refid="namespaced3d_1a8b1ddd7c2d30e952ce9de7c92512a1c4" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a8b1ddd7c2d30e952ce9de7c92512a1c4" kindref="member">delete_vdecl</ref>(VDECL<sp/>vdecl);</highlight></codeline>
<codeline lineno="1376" refid="namespaced3d_1a8cd95d3a91b01e1a9b67860e0b9004fa" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a8cd95d3a91b01e1a9b67860e0b9004fa" kindref="member">setvdecl</ref>(VDECL<sp/>vdecl);</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight></codeline>
<codeline lineno="1379" refid="namespaced3d_1a2927acb6cf349757dc7ac93a19fb70f7" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a2927acb6cf349757dc7ac93a19fb70f7" kindref="member">draw_base</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numprim,<sp/>uint32_t<sp/>num_instances,<sp/>uint32_t<sp/>start_instance);</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>draw(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numprim)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a2927acb6cf349757dc7ac93a19fb70f7" kindref="member">draw_base</ref>(type,<sp/>start,<sp/>numprim,<sp/>1,<sp/>0);<sp/>}</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>draw_instanced(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numprim,<sp/>uint32_t<sp/>num_instances,<sp/>uint32_t<sp/>start_instance<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="1382"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a2927acb6cf349757dc7ac93a19fb70f7" kindref="member">draw_base</ref>(type,<sp/>start,<sp/>numprim,<sp/>num_instances,<sp/>start_instance);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1387" refid="namespaced3d_1a5c8836595266a317fbaa2d1efa0048ee" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a5c8836595266a317fbaa2d1efa0048ee" kindref="member">drawind_base</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startind,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numprim,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>base_vertex,<sp/>uint32_t<sp/>num_instances,<sp/>uint32_t<sp/>start_instance);</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>drawind_instanced(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startind,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numprim,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>base_vertex,<sp/>uint32_t<sp/>num_instances,</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/>uint32_t<sp/>start_instance<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="1391"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a5c8836595266a317fbaa2d1efa0048ee" kindref="member">drawind_base</ref>(type,<sp/>startind,<sp/>numprim,<sp/>base_vertex,<sp/>num_instances,<sp/>start_instance);</highlight></codeline>
<codeline lineno="1393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>drawind(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startind,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numprim,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>base_vertex)</highlight></codeline>
<codeline lineno="1395"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a5c8836595266a317fbaa2d1efa0048ee" kindref="member">drawind_base</ref>(type,<sp/>startind,<sp/>numprim,<sp/>base_vertex,<sp/>1,<sp/>0);</highlight></codeline>
<codeline lineno="1397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1399" refid="namespaced3d_1adac2b4d45c26f003f9b9800ec1298a37" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1adac2b4d45c26f003f9b9800ec1298a37" kindref="member">draw_up</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numprim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride_bytes);</highlight></codeline>
<codeline lineno="1401" refid="namespaced3d_1a0aa110e2b523339984d628c2668f63ee" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a0aa110e2b523339984d628c2668f63ee" kindref="member">drawind_up</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minvert,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numvert,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numprim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*ind,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride_bytes);</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="comment">//<sp/>struct<sp/>args{<sp/><sp/><sp/>uint<sp/>vertexCountPerInstance,InstanceCount,<sp/>StartVertexLocation,<sp/>StartInstanceLocation;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1405" refid="namespaced3d_1ac35a390ee14b676945fb9934f7e0d8dc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1ac35a390ee14b676945fb9934f7e0d8dc" kindref="member">draw_indirect</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*args,<sp/>uint32_t<sp/>byte_offset<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight><highlight class="comment">//<sp/>struct<sp/>args{<sp/><sp/><sp/>uint<sp/>IndexCountPerInstance,InstanceCount,<sp/>StartIndexLocation;<sp/>int<sp/>BaseVertexLocation,<sp/>StartInstanceLocation;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>draw_indexed_indirect(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*args,<sp/>uint32_t<sp/>byte_offset<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>multi_draw_indirect(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prim_type,<sp/><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*args,<sp/>uint32_t<sp/>draw_count,<sp/>uint32_t<sp/>stride_bytes,<sp/>uint32_t<sp/>byte_offset<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>multi_draw_indexed_indirect(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prim_type,<sp/><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*args,<sp/>uint32_t<sp/>draw_count,<sp/>uint32_t<sp/>stride_bytes,<sp/>uint32_t<sp/>byte_offset<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dispatch(uint32_t<sp/>thread_group_x,<sp/>uint32_t<sp/>thread_group_y,<sp/>uint32_t<sp/>thread_group_z,</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/>GpuPipeline<sp/>gpu_pipeline<sp/>=<sp/>GpuPipeline::GRAPHICS);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dispatch_indirect(<ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*args,<sp/>uint32_t<sp/>byte_offset<sp/>=<sp/>0,<sp/>GpuPipeline<sp/>gpu_pipeline<sp/>=<sp/>GpuPipeline::GRAPHICS);</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Max<sp/>value<sp/>for<sp/>each<sp/>direction<sp/>is<sp/>64k,<sp/>product<sp/>of<sp/>all<sp/>dimensions<sp/>can<sp/>not<sp/>exceed<sp/>2^22</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dispatch_mesh(uint32_t<sp/>thread_group_x,<sp/>uint32_t<sp/>thread_group_y,<sp/>uint32_t<sp/>thread_group_z);</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Args<sp/>are<sp/>the<sp/>same<sp/>as<sp/>dispatch_indirect<sp/>{<sp/>uint32_t<sp/>thread_group_x,<sp/>uint32_t<sp/>thread_group_y,<sp/>uint32_t<sp/>thread_group_z<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dispatch_mesh_indirect(<ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*args,<sp/>uint32_t<sp/>dispatch_count,<sp/>uint32_t<sp/>stride_bytes,<sp/>uint32_t<sp/>byte_offset<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Variant<sp/>of<sp/>dispatch_mesh_indirect<sp/>where<sp/>&apos;dispatch_count&apos;<sp/>is<sp/>read<sp/>by<sp/>the<sp/>GPU<sp/>from<sp/>&apos;count&apos;<sp/>buffer<sp/>at<sp/>&apos;count_offset&apos;<sp/>(as<sp/>uint32_t),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>value<sp/>can<sp/>not<sp/>exceed<sp/>&apos;max_count&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dispatch_mesh_indirect_count(<ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*args,<sp/>uint32_t<sp/>args_stride_bytes,<sp/>uint32_t<sp/>args_byte_offset,<sp/><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*count,</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/>uint32_t<sp/>count_byte_offset,<sp/>uint32_t<sp/>max_count);</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal">GPUFENCEHANDLE<sp/>insert_fence(GpuPipeline<sp/>gpu_pipeline);</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insert_wait_on_fence(GPUFENCEHANDLE<sp/>&amp;fence,<sp/>GpuPipeline<sp/>gpu_pipeline);</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight><highlight class="comment">//<sp/>additional<sp/>L2<sp/>cache<sp/>flush<sp/>calls<sp/>would<sp/>need<sp/>to<sp/>be<sp/>added<sp/>to<sp/>support<sp/>CPU<sp/>&lt;-&gt;<sp/>Compute<sp/>Context<sp/>data<sp/>communication</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(at<sp/>least<sp/>on<sp/>Xbox<sp/>One,<sp/>see<sp/>XDK<sp/>docs,<sp/>article<sp/>&quot;Optimizing<sp/>Monolithic<sp/>Driver<sp/>Performance&quot;,<sp/>part<sp/>&quot;Manual<sp/>Cache<sp/>and<sp/>Pipeline<sp/>Flushing&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Render<sp/>states</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>setantialias(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aa_type);</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getantialias();</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_blend_factor(E3DCOLOR<sp/>color);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>setstencil(uint32_t<sp/>ref);</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>setwire(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>in);</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_depth_bounds(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>zmin,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>zmax);</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>supports_depth_bounds();<sp/></highlight><highlight class="comment">//<sp/>returns<sp/>true<sp/>if<sp/>hardware<sp/>supports<sp/>depth<sp/>bounds.<sp/>same<sp/>as<sp/>get_driver_desc().caps.hasDepthBoundsTestS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Miscellaneous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_srgb_backbuffer_write(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>returns<sp/>previous<sp/>result.<sp/>switch<sp/>on/off<sp/>srgb<sp/>write<sp/>to<sp/>backbuffer<sp/>(default<sp/>is<sp/>off)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_msaa_pass();</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_depth_resolve();</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>setgamma(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isVcolRgba();</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>get_screen_aspect_ratio();</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>change_screen_aspect_ratio(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ar);</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Screen<sp/>capture</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight></codeline>
<codeline lineno="1461" refid="namespaced3d_1a41c6a4654ebd422c9bde28ce7272cd57" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="namespaced3d_1a41c6a4654ebd422c9bde28ce7272cd57" kindref="member">fast_capture_screen</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;stride_bytes,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;format);</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>end_fast_capture_screen();</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight></codeline>
<codeline lineno="1467" refid="namespaced3d_1a7a6b0d0be92247d655976f4d9034b37f" refkind="member"><highlight class="normal">TexPixel32<sp/>*<ref refid="namespaced3d_1a7a6b0d0be92247d655976f4d9034b37f" kindref="member">capture_screen</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;stride_bytes);</highlight></codeline>
<codeline lineno="1469" refid="namespaced3d_1aeb97c8d8d39d5373bcdde296baace9fd" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1aeb97c8d8d39d5373bcdde296baace9fd" kindref="member">release_capture_buffer</ref>();</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473" refid="namespaced3d_1a74fa30565879cd55fbc1f66adce6c31a" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a74fa30565879cd55fbc1f66adce6c31a" kindref="member">get_screen_size</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;h);</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"></highlight></codeline>
<codeline lineno="1482" refid="namespaced3d_1a6b7836ac60b0491977db49cfb23e35e8" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a6b7836ac60b0491977db49cfb23e35e8" kindref="member">create_predicate</ref>();<sp/></highlight><highlight class="comment">//<sp/>-1<sp/>if<sp/>not<sp/>supported<sp/>or<sp/>something<sp/>goes<sp/>wrong</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>free_predicate(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>begin_survey(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>false<sp/>if<sp/>not<sp/>supported<sp/>or<sp/>bad<sp/>id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>end_survey(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>begin_conditional_render(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>end_conditional_render(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal">PROGRAM<sp/>get_debug_program();</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>beginEvent(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);<sp/></highlight><highlight class="comment">//<sp/>for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>endEvent();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>get_vrr_supported();</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>get_vsync_enabled();</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable_vsync(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Backbuffer<sp/>is<sp/>only<sp/>valid<sp/>while<sp/>the<sp/>GPU<sp/>is<sp/>acquired,<sp/>and<sp/>can<sp/>be<sp/>recreated<sp/>in<sp/>between.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><ref refid="class_base_texture" kindref="compound">Texture</ref><sp/>*get_backbuffer_tex();</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><ref refid="class_base_texture" kindref="compound">Texture</ref><sp/>*get_secondary_backbuffer_tex();</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><ref refid="class_base_texture" kindref="compound">Texture</ref><sp/>*get_backbuffer_tex_depth();</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;rayTrace/rayTracedrv3d.inl.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>ResourceBarrierDesc<sp/>and<sp/>https://info.gaijin.lan/display/DE4/Resource+and+Execution+Barriers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resource_barrier(<ref refid="class_resource_barrier_desc" kindref="compound">ResourceBarrierDesc</ref><sp/>desc,<sp/>GpuPipeline<sp/>gpu_pipeline<sp/>=<sp/>GpuPipeline::GRAPHICS);</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><ref refid="struct_resource_allocation_properties" kindref="compound">ResourceAllocationProperties</ref><sp/>get_resource_allocation_properties(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_resource_description" kindref="compound">ResourceDescription</ref><sp/>&amp;desc);</highlight></codeline>
<codeline lineno="1509"><highlight class="normal">ResourceHeap<sp/>*create_resource_heap(ResourceHeapGroup<sp/>*heap_group,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/>ResourceHeapCreateFlags<sp/>flags);</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>destroy_resource_heap(ResourceHeap<sp/>*heap);</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*place_buffere_in_resource_heap(ResourceHeap<sp/>*heap,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_resource_description" kindref="compound">ResourceDescription</ref><sp/>&amp;desc,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset,</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_resource_allocation_properties" kindref="compound">ResourceAllocationProperties</ref><sp/>&amp;alloc_info,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*place_texture_in_resource_heap(ResourceHeap<sp/>*heap,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_resource_description" kindref="compound">ResourceDescription</ref><sp/>&amp;desc,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset,</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_resource_allocation_properties" kindref="compound">ResourceAllocationProperties</ref><sp/>&amp;alloc_info,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><ref refid="struct_resource_heap_group_properties" kindref="compound">ResourceHeapGroupProperties</ref><sp/>get_resource_heap_group_properties(ResourceHeapGroup<sp/>*heap_group);</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Maps<sp/>a<sp/>memory<sp/>area<sp/>of<sp/>the<sp/>heap<sp/>to<sp/>the<sp/>specified<sp/>xyz<sp/>location<sp/>of<sp/>the<sp/>texture.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>heap<sp/>==<sp/>nullptr<sp/>to<sp/>remove<sp/>the<sp/>link<sp/>between<sp/>a<sp/>tile<sp/>and<sp/>the<sp/>mapped<sp/>heap<sp/>portion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>map_tile_to_resource(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex,<sp/>ResourceHeap<sp/>*heap,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_tile_mapping" kindref="compound">TileMapping</ref><sp/>*mapping,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mapping_count);</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><ref refid="struct_texture_tiling_info" kindref="compound">TextureTilingInfo</ref><sp/>get_texture_tiling_info(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>subresource);</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>activate_buffer(<ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*buf,<sp/>ResourceActivationAction<sp/>action,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="union_resource_clear_value" kindref="compound">ResourceClearValue</ref><sp/>&amp;value<sp/>=<sp/>{},</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/>GpuPipeline<sp/>gpu_pipeline<sp/>=<sp/>GpuPipeline::GRAPHICS);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>activate_texture(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex,<sp/>ResourceActivationAction<sp/>action,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="union_resource_clear_value" kindref="compound">ResourceClearValue</ref><sp/>&amp;value<sp/>=<sp/>{},</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/>GpuPipeline<sp/>gpu_pipeline<sp/>=<sp/>GpuPipeline::GRAPHICS);</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deactivate_buffer(<ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*buf,<sp/>GpuPipeline<sp/>gpu_pipeline<sp/>=<sp/>GpuPipeline::GRAPHICS);</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deactivate_texture(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex,<sp/>GpuPipeline<sp/>gpu_pipeline<sp/>=<sp/>GpuPipeline::GRAPHICS);</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allocates<sp/>a<sp/>update<sp/>buffer<sp/>to<sp/>update<sp/>the<sp/>subregion<sp/>described<sp/>by<sp/>offset_x,<sp/>offset_y,<sp/>offset_z,<sp/>width,<sp/>height<sp/>and<sp/>depth.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>dest_base_texture<sp/>can<sp/>not<sp/>be<sp/>nullptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>dest_mip<sp/>must<sp/>be<sp/>a<sp/>valid<sp/>mipmap<sp/>level<sp/>for<sp/>dest_base_texture</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>dest_slice<sp/>must<sp/>be<sp/>a<sp/>valid<sp/>array<sp/>index<sp/>/<sp/>cube<sp/>face<sp/>for<sp/>dest_base_texture<sp/>when<sp/>it<sp/>is<sp/>a<sp/>array,<sp/>cube<sp/>or<sp/>cube<sp/>array<sp/>texture,<sp/>otherwise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight><highlight class="comment">//<sp/>has<sp/>to<sp/>be<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>offset_x<sp/>must<sp/>be<sp/>within<sp/>the<sp/>width<sp/>of<sp/>dest_base_texture<sp/>of<sp/>miplevel<sp/>dest_mip<sp/>and<sp/>aligned<sp/>to<sp/>the<sp/>texture<sp/>format<sp/>block<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>offset_y<sp/>must<sp/>be<sp/>within<sp/>the<sp/>height<sp/>of<sp/>dest_base_texture<sp/>of<sp/>miplevel<sp/>dest_mip<sp/>and<sp/>aligned<sp/>to<sp/>the<sp/>texture<sp/>format<sp/>block<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>offset_z<sp/>must<sp/>be<sp/>within<sp/>the<sp/>depth<sp/>of<sp/>dest_base_texture<sp/>of<sp/>miplevel<sp/>dest_mip<sp/>when<sp/>the<sp/>texture<sp/>is<sp/>a<sp/>vol<sp/>tex,<sp/>otherwise<sp/>has<sp/>to<sp/>be<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>width<sp/>plus<sp/>offset_x<sp/>must<sp/>be<sp/>within<sp/>the<sp/>width<sp/>of<sp/>dest_base_texture<sp/>of<sp/>miplevel<sp/>dest_mip<sp/>and<sp/>aligned<sp/>to<sp/>the<sp/>texture<sp/>format<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight><highlight class="comment">//<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>height<sp/>plus<sp/>offset_y<sp/>must<sp/>be<sp/>within<sp/>the<sp/>height<sp/>of<sp/>dest_base_texture<sp/>of<sp/>miplevel<sp/>dest_mip<sp/>and<sp/>aligned<sp/>to<sp/>the<sp/>texture<sp/>format<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight><highlight class="comment">//<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>depth<sp/>plus<sp/>offset_z<sp/>must<sp/>be<sp/>within<sp/>the<sp/>depth<sp/>of<sp/>dest_base_texture<sp/>of<sp/>miplevel<sp/>dest_mip<sp/>when<sp/>the<sp/>texture<sp/>is<sp/>a<sp/>vol<sp/>tex,<sp/>otherwise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight><highlight class="comment">//<sp/>has<sp/>to<sp/>be<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight><highlight class="comment">//<sp/>May<sp/>return<sp/>nullptr<sp/>if<sp/>either<sp/>inputs<sp/>violate<sp/>the<sp/>rules<sp/>above,<sp/>the<sp/>driver<sp/>can<sp/>currently<sp/>not<sp/>provide<sp/>the<sp/>memory<sp/>required<sp/>or<sp/>the<sp/>driver</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>unable<sp/>to<sp/>perform<sp/>the<sp/>needed<sp/>copy<sp/>operation<sp/>on<sp/>update.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal">ResUpdateBuffer<sp/>*allocate_update_buffer_for_tex_region(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*dest_base_texture,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>dest_mip,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>dest_slice,</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>offset_x,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>offset_y,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>offset_z,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>height,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>depth);</highlight></codeline>
<codeline lineno="1553" refid="namespaced3d_1aaedc608c1d55a1a5d691ff6f73905fe0" refkind="member"><highlight class="normal">ResUpdateBuffer<sp/>*<ref refid="namespaced3d_1aaedc608c1d55a1a5d691ff6f73905fe0" kindref="member">allocate_update_buffer_for_tex</ref>(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*dest_tex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dest_mip,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dest_slice);</highlight></codeline>
<codeline lineno="1555" refid="namespaced3d_1a2fe916f100929967fa9742c59d975f0c" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a2fe916f100929967fa9742c59d975f0c" kindref="member">release_update_buffer</ref>(ResUpdateBuffer<sp/>*&amp;rub);</highlight></codeline>
<codeline lineno="1557" refid="namespaced3d_1a8934287bc4ff138a5869b5cdb0d3cce1" refkind="member"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="namespaced3d_1a8934287bc4ff138a5869b5cdb0d3cce1" kindref="member">get_update_buffer_addr_for_write</ref>(ResUpdateBuffer<sp/>*rub);</highlight></codeline>
<codeline lineno="1559" refid="namespaced3d_1a5de76a26d3b646de9f97e090cf033cc5" refkind="member"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a5de76a26d3b646de9f97e090cf033cc5" kindref="member">get_update_buffer_size</ref>(ResUpdateBuffer<sp/>*rub);</highlight></codeline>
<codeline lineno="1561" refid="namespaced3d_1a387e756ba0ef9df2928c1c53993ec4a2" refkind="member"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a387e756ba0ef9df2928c1c53993ec4a2" kindref="member">get_update_buffer_pitch</ref>(ResUpdateBuffer<sp/>*rub);</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>pitch<sp/>of<sp/>one<sp/>2d<sp/>image<sp/>slice<sp/>for<sp/>volumetric<sp/>textures.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>get_update_buffer_slice_pitch(ResUpdateBuffer<sp/>*rub);</highlight></codeline>
<codeline lineno="1565" refid="namespaced3d_1a0a4242326b70e499628e3600f1505630" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaced3d_1a0a4242326b70e499628e3600f1505630" kindref="member">update_texture_and_release_update_buffer</ref>(ResUpdateBuffer<sp/>*&amp;src_rub);</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight></codeline>
<codeline lineno="1578" refid="group___render_pass_d3_d_1ga4d90bfe31385c2f6a059b20a2035b02e" refkind="member"><highlight class="normal">RenderPass<sp/>*<ref refid="group___render_pass_d3_d_1ga4d90bfe31385c2f6a059b20a2035b02e" kindref="member">create_render_pass</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_render_pass_desc" kindref="compound">RenderPassDesc</ref><sp/>&amp;rp_desc);</highlight></codeline>
<codeline lineno="1583" refid="group___render_pass_d3_d_1ga7d9a33d5eb0008a70925a63a0e6c8f9c" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___render_pass_d3_d_1ga7d9a33d5eb0008a70925a63a0e6c8f9c" kindref="member">delete_render_pass</ref>(RenderPass<sp/>*rp);</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight></codeline>
<codeline lineno="1595" refid="group___render_pass_d3_d_1gaa4a6f280d5f8c0652a81bde072acd524" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___render_pass_d3_d_1gaa4a6f280d5f8c0652a81bde072acd524" kindref="member">begin_render_pass</ref>(RenderPass<sp/>*rp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_render_pass_area" kindref="compound">RenderPassArea</ref><sp/>area,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_render_pass_target" kindref="compound">RenderPassTarget</ref><sp/>*targets);</highlight></codeline>
<codeline lineno="1603" refid="group___render_pass_d3_d_1ga377ea5974efb7d1c02250abc4b64e400" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___render_pass_d3_d_1ga377ea5974efb7d1c02250abc4b64e400" kindref="member">next_subpass</ref>();</highlight></codeline>
<codeline lineno="1610" refid="group___render_pass_d3_d_1ga053cea528c68defea3886ff83e537f83" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___render_pass_d3_d_1ga053cea528c68defea3886ff83e537f83" kindref="member">end_render_pass</ref>();</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!_TARGET_D3D_MULTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal">shaders::DriverRenderStateId<sp/>create_render_state(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>shaders::RenderState<sp/>&amp;state);</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_render_state(shaders::DriverRenderStateId<sp/>state_id);</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear_render_states();</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_TARGET_XBOX<sp/>||<sp/>_TARGET_C1<sp/>||<sp/>_TARGET_C2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resummarize_htile(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex);</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resummarize_htile(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*)<sp/>{}</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_TARGET_XBOX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_esram_layout(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>unset_esram_layout();</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset_esram_layout();</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>prefetch_movable_textures();</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeback_movable_textures();</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_esram_layout(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*)<sp/>{}</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>unset_esram_layout()<sp/>{}</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset_esram_layout()<sp/>{}</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>prefetch_movable_textures()<sp/>{}</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeback_movable_textures()<sp/>{}</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_TARGET_C1<sp/>|<sp/>_TARGET_C2<sp/>|<sp/>_TARGET_DX11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HALF_TEXEL_OFS<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HALF_TEXEL_OFSF<sp/>0.f</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_TARGET_D3D_MULTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>HALF_TEXEL_OFSFU;</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HALF_TEXEL_OFSF<sp/>(const<sp/>float)d3d::HALF_TEXEL_OFSFU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HALF_TEXEL_OFS;</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>HALF_TEXEL_OFSFU;</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HALF_TEXEL_OFSF<sp/>d3d::HALF_TEXEL_OFSFU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HALF_TEXEL_OFS;</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_TARGET_C1<sp/>||<sp/>_TARGET_XBOX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>D3D_HAS_QUADS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>D3D_HAS_QUADS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>d3d</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_MSC_VER<sp/>&gt;=<sp/>1300</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/>__declspec(noinline)</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/>d3derr_in_device_reset(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg);</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dagor_d3d_force_driver_reset;</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>d3derr(c,<sp/>m)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1671"><highlight class="preprocessor"><sp/><sp/>do<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1672"><highlight class="preprocessor"><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1673"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>bool<sp/>res<sp/>=<sp/>(c);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1674"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>G_ANALYSIS_ASSUME(res);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1675"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!res)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1676"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1677"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>canReset;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1678"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(dagor_d3d_force_driver_reset<sp/>||<sp/>d3d::device_lost(&amp;canReset))<sp/>\</highlight></codeline>
<codeline lineno="1679"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d3derr_in_device_reset(m);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1680"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1681"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DAG_FATAL(&quot;%s:\n%s&quot;</highlight><highlight class="normal">,<sp/>m,<sp/>d3d::get_last_error());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>d3d_err(c)<sp/>d3derr((c),<sp/>&quot;Driver3d<sp/>error&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_TARGET_D3D_MULTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;3d/dag_drv3d_multi.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;3d/dag_drv3dCmd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/3d/dag_drv3d.h"/>
  </compounddef>
</doxygen>
